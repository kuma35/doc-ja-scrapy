# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008–2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-10 09:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/request-response.rst:5
msgid "Requests and Responses"
msgstr ""

#: ../../topics/request-response.rst:10
msgid "Scrapy uses :class:`Request` and :class:`Response` objects for crawling web sites."
msgstr ""

#: ../../topics/request-response.rst:13
msgid "Typically, :class:`Request` objects are generated in the spiders and pass across the system until they reach the Downloader, which executes the request and returns a :class:`Response` object which travels back to the spider that issued the request."
msgstr ""

#: ../../topics/request-response.rst:18
msgid "Both :class:`Request` and :class:`Response` classes have subclasses which add functionality not required in the base classes. These are described below in :ref:`topics-request-response-ref-request-subclasses` and :ref:`topics-request-response-ref-response-subclasses`."
msgstr ""

#: ../../topics/request-response.rst:25
msgid "Request objects"
msgstr ""

#: ../../topics/request-response.rst:29
msgid "A :class:`Request` object represents an HTTP request, which is usually generated in the Spider and executed by the Downloader, and thus generating a :class:`Response`."
msgstr ""

#: ../../topics/request-response.rst:0
#: ../../topics/request-response.rst:0
#: ../../topics/request-response.rst:0
#: ../../topics/request-response.rst:0
#: ../../topics/request-response.rst:0
#: ../../topics/request-response.rst:0
msgid "パラメータ"
msgstr ""

#: ../../topics/request-response.rst:33
msgid "the URL of this request"
msgstr ""

#: ../../topics/request-response.rst:36
msgid "the function that will be called with the response of this request (once its downloaded) as its first parameter. For more information see :ref:`topics-request-response-ref-request-callback-arguments` below. If a Request doesn't specify a callback, the spider's :meth:`~scrapy.spiders.Spider.parse` method will be used. Note that if exceptions are raised during processing, errback is called instead."
msgstr ""

#: ../../topics/request-response.rst:45
msgid "the HTTP method of this request. Defaults to ``'GET'``."
msgstr ""

#: ../../topics/request-response.rst:48
msgid "the initial values for the :attr:`Request.meta` attribute. If given, the dict passed in this parameter will be shallow copied."
msgstr ""

#: ../../topics/request-response.rst:52
msgid "the request body. If a ``unicode`` is passed, then it's encoded to ``str`` using the ``encoding`` passed (which defaults to ``utf-8``). If ``body`` is not given, an empty string is stored. Regardless of the type of this argument, the final value stored will be a ``str`` (never ``unicode`` or ``None``)."
msgstr ""

#: ../../topics/request-response.rst:59
msgid "the headers of this request. The dict values can be strings (for single valued headers) or lists (for multi-valued headers). If ``None`` is passed as value, the HTTP header will not be sent at all."
msgstr ""

#: ../../topics/request-response.rst:64
msgid "the request cookies. These can be sent in two forms.  1. Using a dict::      request_with_cookies = Request(url=\"http://www.example.com\",                                    cookies={'currency': 'USD', 'country': 'UY'})  2. Using a list of dicts::      request_with_cookies = Request(url=\"http://www.example.com\",                                    cookies=[{'name': 'currency',                                             'value': 'USD',                                             'domain': 'example.com',                                             'path': '/currency'}])  The latter form allows for customizing the ``domain`` and ``path`` attributes of the cookie. This is only useful if the cookies are saved for later requests.  .. reqmeta:: dont_merge_cookies  When some site returns cookies (in a response) those are stored in the cookies for that domain and will be sent again in future requests. That's the typical behaviour of any regular web browser. However, if, for some reason, you want to avoid merging with existing cookies you can instruct Scrapy to do so by setting the ``dont_merge_cookies`` key to True in the :attr:`Request.meta`.  Example of request without merging cookies::      request_with_cookies = Request(url=\"http://www.example.com\",                                    cookies={'currency': 'USD', 'country': 'UY'},                                    meta={'dont_merge_cookies': True})  For more info see :ref:`cookies-mw`."
msgstr ""

#: ../../topics/request-response.rst:64
msgid "the request cookies. These can be sent in two forms."
msgstr ""

#: ../../topics/request-response.rst:66
msgid "Using a dict::"
msgstr ""

#: ../../topics/request-response.rst:71
msgid "Using a list of dicts::"
msgstr ""

#: ../../topics/request-response.rst:79
msgid "The latter form allows for customizing the ``domain`` and ``path`` attributes of the cookie. This is only useful if the cookies are saved for later requests."
msgstr ""

#: ../../topics/request-response.rst:85
msgid "When some site returns cookies (in a response) those are stored in the cookies for that domain and will be sent again in future requests. That's the typical behaviour of any regular web browser. However, if, for some reason, you want to avoid merging with existing cookies you can instruct Scrapy to do so by setting the ``dont_merge_cookies`` key to True in the :attr:`Request.meta`."
msgstr ""

#: ../../topics/request-response.rst:92
msgid "Example of request without merging cookies::"
msgstr ""

#: ../../topics/request-response.rst:98
msgid "For more info see :ref:`cookies-mw`."
msgstr ""

#: ../../topics/request-response.rst:101
msgid "the encoding of this request (defaults to ``'utf-8'``). This encoding will be used to percent-encode the URL and to convert the body to ``str`` (if given as ``unicode``)."
msgstr ""

#: ../../topics/request-response.rst:106
msgid "the priority of this request (defaults to ``0``). The priority is used by the scheduler to define the order used to process requests.  Requests with a higher priority value will execute earlier. Negative values are allowed in order to indicate relatively low-priority."
msgstr ""

#: ../../topics/request-response.rst:112
msgid "indicates that this request should not be filtered by the scheduler. This is used when you want to perform an identical request multiple times, to ignore the duplicates filter. Use it with care, or you will get into crawling loops. Default to ``False``."
msgstr ""

#: ../../topics/request-response.rst:118
msgid "a function that will be called if any exception was raised while processing the request. This includes pages that failed with 404 HTTP errors and such. It receives a `Twisted Failure`_ instance as first parameter. For more information, see :ref:`topics-request-response-ref-errbacks` below."
msgstr ""

#: ../../topics/request-response.rst:126
msgid "Flags sent to the request, can be used for logging or similar purposes."
msgstr ""

#: ../../topics/request-response.rst:129
msgid "A dict with arbitrary data that will be passed as keyword arguments to the Request's callback."
msgstr ""

#: ../../topics/request-response.rst:134
msgid "A string containing the URL of this request. Keep in mind that this attribute contains the escaped URL, so it can differ from the URL passed in the constructor."
msgstr ""

#: ../../topics/request-response.rst:138
msgid "This attribute is read-only. To change the URL of a Request use :meth:`replace`."
msgstr ""

#: ../../topics/request-response.rst:143
msgid "A string representing the HTTP method in the request. This is guaranteed to be uppercase. Example: ``\"GET\"``, ``\"POST\"``, ``\"PUT\"``, etc"
msgstr ""

#: ../../topics/request-response.rst:148
msgid "A dictionary-like object which contains the request headers."
msgstr ""

#: ../../topics/request-response.rst:152
msgid "A str that contains the request body."
msgstr ""

#: ../../topics/request-response.rst:154
msgid "This attribute is read-only. To change the body of a Request use :meth:`replace`."
msgstr ""

#: ../../topics/request-response.rst:159
msgid "A dict that contains arbitrary metadata for this request. This dict is empty for new Requests, and is usually  populated by different Scrapy components (extensions, middlewares, etc). So the data contained in this dict depends on the extensions you have enabled."
msgstr ""

#: ../../topics/request-response.rst:164
msgid "See :ref:`topics-request-meta` for a list of special meta keys recognized by Scrapy."
msgstr ""

#: ../../topics/request-response.rst:167
msgid "This dict is `shallow copied`_ when the request is cloned using the ``copy()`` or ``replace()`` methods, and can also be accessed, in your spider, from the ``response.meta`` attribute."
msgstr ""

#: ../../topics/request-response.rst:173
msgid "A dictionary that contains arbitrary metadata for this request. Its contents will be passed to the Request's callback as keyword arguments. It is empty for new Requests, which means by default callbacks only get a :class:`Response` object as argument."
msgstr ""

#: ../../topics/request-response.rst:178
msgid "This dict is `shallow copied`_ when the request is cloned using the ``copy()`` or ``replace()`` methods, and can also be accessed, in your spider, from the ``response.cb_kwargs`` attribute."
msgstr ""

#: ../../topics/request-response.rst:186
msgid "Return a new Request which is a copy of this Request. See also: :ref:`topics-request-response-ref-request-callback-arguments`."
msgstr ""

#: ../../topics/request-response.rst:191
msgid "Return a Request object with the same members, except for those members given new values by whichever keyword arguments are specified. The :attr:`Request.cb_kwargs` and :attr:`Request.meta` attributes are shallow copied by default (unless new values are given as arguments). See also :ref:`topics-request-response-ref-request-callback-arguments`."
msgstr ""

#: ../../topics/request-response.rst:202
msgid "Passing additional data to callback functions"
msgstr ""

#: ../../topics/request-response.rst:204
msgid "The callback of a request is a function that will be called when the response of that request is downloaded. The callback function will be called with the downloaded :class:`Response` object as its first argument."
msgstr ""

#: ../../topics/request-response.rst:208
msgid "Example::"
msgstr ""

#: ../../topics/request-response.rst:218
msgid "In some cases you may be interested in passing arguments to those callback functions so you can receive the arguments later, in the second callback. The following example shows how to achieve this by using the :attr:`Request.cb_kwargs` attribute:"
msgstr ""

#: ../../topics/request-response.rst:239
msgid ":attr:`Request.cb_kwargs` was introduced in version ``1.7``. Prior to that, using :attr:`Request.meta` was recommended for passing information around callbacks. After ``1.7``, :attr:`Request.cb_kwargs` became the preferred way for handling user information, leaving :attr:`Request.meta` for communication with components like middlewares and extensions."
msgstr ""

#: ../../topics/request-response.rst:248
msgid "Using errbacks to catch exceptions in request processing"
msgstr ""

#: ../../topics/request-response.rst:250
msgid "The errback of a request is a function that will be called when an exception is raise while processing it."
msgstr ""

#: ../../topics/request-response.rst:253
msgid "It receives a `Twisted Failure`_ instance as first parameter and can be used to track connection establishment timeouts, DNS errors etc."
msgstr ""

#: ../../topics/request-response.rst:256
msgid "Here's an example spider logging all errors and catching some specific errors if needed::"
msgstr ""

#: ../../topics/request-response.rst:310
msgid "Request.meta special keys"
msgstr ""

#: ../../topics/request-response.rst:312
msgid "The :attr:`Request.meta` attribute can contain any arbitrary data, but there are some special keys recognized by Scrapy and its built-in extensions."
msgstr ""

#: ../../topics/request-response.rst:315
msgid "Those are:"
msgstr ""

#: ../../topics/request-response.rst:317
msgid ":reqmeta:`dont_redirect`"
msgstr ""

#: ../../topics/request-response.rst:318
msgid ":reqmeta:`dont_retry`"
msgstr ""

#: ../../topics/request-response.rst:319
msgid ":reqmeta:`handle_httpstatus_list`"
msgstr ""

#: ../../topics/request-response.rst:320
msgid ":reqmeta:`handle_httpstatus_all`"
msgstr ""

#: ../../topics/request-response.rst:321
msgid ":reqmeta:`dont_merge_cookies`"
msgstr ""

#: ../../topics/request-response.rst:322
msgid ":reqmeta:`cookiejar`"
msgstr ""

#: ../../topics/request-response.rst:323
msgid ":reqmeta:`dont_cache`"
msgstr ""

#: ../../topics/request-response.rst:324
msgid ":reqmeta:`redirect_reasons`"
msgstr ""

#: ../../topics/request-response.rst:325
msgid ":reqmeta:`redirect_urls`"
msgstr ""

#: ../../topics/request-response.rst:326
msgid ":reqmeta:`bindaddress`"
msgstr ""

#: ../../topics/request-response.rst:327
msgid ":reqmeta:`dont_obey_robotstxt`"
msgstr ""

#: ../../topics/request-response.rst:328
msgid ":reqmeta:`download_timeout`"
msgstr ""

#: ../../topics/request-response.rst:329
msgid ":reqmeta:`download_maxsize`"
msgstr ""

#: ../../topics/request-response.rst:330
msgid ":reqmeta:`download_latency`"
msgstr ""

#: ../../topics/request-response.rst:331
msgid ":reqmeta:`download_fail_on_dataloss`"
msgstr ""

#: ../../topics/request-response.rst:332
msgid ":reqmeta:`proxy`"
msgstr ""

#: ../../topics/request-response.rst:333
msgid "``ftp_user`` (See :setting:`FTP_USER` for more info)"
msgstr ""

#: ../../topics/request-response.rst:334
msgid "``ftp_password`` (See :setting:`FTP_PASSWORD` for more info)"
msgstr ""

#: ../../topics/request-response.rst:335
msgid ":reqmeta:`referrer_policy`"
msgstr ""

#: ../../topics/request-response.rst:336
msgid ":reqmeta:`max_retry_times`"
msgstr ""

#: ../../topics/request-response.rst:341
msgid "bindaddress"
msgstr ""

#: ../../topics/request-response.rst:343
msgid "The IP of the outgoing IP address to use for the performing the request."
msgstr ""

#: ../../topics/request-response.rst:348
msgid "download_timeout"
msgstr ""

#: ../../topics/request-response.rst:350
msgid "The amount of time (in secs) that the downloader will wait before timing out. See also: :setting:`DOWNLOAD_TIMEOUT`."
msgstr ""

#: ../../topics/request-response.rst:356
msgid "download_latency"
msgstr ""

#: ../../topics/request-response.rst:358
msgid "The amount of time spent to fetch the response, since the request has been started, i.e. HTTP message sent over the network. This meta key only becomes available when the response has been downloaded. While most other meta keys are used to control Scrapy behavior, this one is supposed to be read-only."
msgstr ""

#: ../../topics/request-response.rst:366
msgid "download_fail_on_dataloss"
msgstr ""

#: ../../topics/request-response.rst:368
msgid "Whether or not to fail on broken responses. See: :setting:`DOWNLOAD_FAIL_ON_DATALOSS`."
msgstr ""

#: ../../topics/request-response.rst:374
msgid "max_retry_times"
msgstr ""

#: ../../topics/request-response.rst:376
msgid "The meta key is used set retry times per request. When initialized, the :reqmeta:`max_retry_times` meta key takes higher precedence over the :setting:`RETRY_TIMES` setting."
msgstr ""

#: ../../topics/request-response.rst:383
msgid "Request subclasses"
msgstr ""

#: ../../topics/request-response.rst:385
msgid "Here is the list of built-in :class:`Request` subclasses. You can also subclass it to implement your own custom functionality."
msgstr ""

#: ../../topics/request-response.rst:389
msgid "FormRequest objects"
msgstr ""

#: ../../topics/request-response.rst:391
msgid "The FormRequest class extends the base :class:`Request` with functionality for dealing with HTML forms. It uses `lxml.html forms`_  to pre-populate form fields with form data from :class:`Response` objects."
msgstr ""

#: ../../topics/request-response.rst:399
msgid "The :class:`FormRequest` class adds a new argument to the constructor. The remaining arguments are the same as for the :class:`Request` class and are not documented here."
msgstr ""

#: ../../topics/request-response.rst:403
msgid "is a dictionary (or iterable of (key, value) tuples) containing HTML Form data which will be url-encoded and assigned to the body of the request."
msgstr ""

#: ../../topics/request-response.rst:408
msgid "The :class:`FormRequest` objects support the following class method in addition to the standard :class:`Request` methods:"
msgstr ""

#: ../../topics/request-response.rst:413
msgid "Returns a new :class:`FormRequest` object with its form field values pre-populated with those found in the HTML ``<form>`` element contained in the given response. For an example see :ref:`topics-request-response-ref-request-userlogin`."
msgstr ""

#: ../../topics/request-response.rst:418
msgid "The policy is to automatically simulate a click, by default, on any form control that looks clickable, like a ``<input type=\"submit\">``.  Even though this is quite convenient, and often the desired behaviour, sometimes it can cause problems which could be hard to debug. For example, when working with forms that are filled and/or submitted using javascript, the default :meth:`from_response` behaviour may not be the most appropriate. To disable this behaviour you can set the ``dont_click`` argument to ``True``. Also, if you want to change the control clicked (instead of disabling it) you can also use the ``clickdata`` argument."
msgstr ""

#: ../../topics/request-response.rst:429
msgid "Using this method with select elements which have leading or trailing whitespace in the option values will not work due to a `bug in lxml`_, which should be fixed in lxml 3.8 and above."
msgstr ""

#: ../../topics/request-response.rst:433
msgid "the response containing a HTML form which will be used to pre-populate the form fields"
msgstr ""

#: ../../topics/request-response.rst:437
msgid "if given, the form with name attribute set to this value will be used."
msgstr ""

#: ../../topics/request-response.rst:440
msgid "if given, the form with id attribute set to this value will be used."
msgstr ""

#: ../../topics/request-response.rst:443
msgid "if given, the first form that matches the xpath will be used."
msgstr ""

#: ../../topics/request-response.rst:446
msgid "if given, the first form that matches the css selector will be used."
msgstr ""

#: ../../topics/request-response.rst:449
msgid "the number of form to use, when the response contains multiple forms. The first one (and also the default) is ``0``."
msgstr ""

#: ../../topics/request-response.rst:453
msgid "fields to override in the form data. If a field was already present in the response ``<form>`` element, its value is overridden by the one passed in this parameter. If a value passed in this parameter is ``None``, the field will not be included in the request, even if it was present in the response ``<form>`` element."
msgstr ""

#: ../../topics/request-response.rst:460
msgid "attributes to lookup the control clicked. If it's not given, the form data will be submitted simulating a click on the first clickable element. In addition to html attributes, the control can be identified by its zero-based index relative to other submittable inputs inside the form, via the ``nr`` attribute."
msgstr ""

#: ../../topics/request-response.rst:467
msgid "If True, the form data will be submitted without clicking in any element."
msgstr ""

#: ../../topics/request-response.rst:471
msgid "The other parameters of this class method are passed directly to the :class:`FormRequest` constructor."
msgstr ""

#: ../../topics/request-response.rst:474
msgid "The ``formname`` parameter."
msgstr ""

#: ../../topics/request-response.rst:477
msgid "The ``formxpath`` parameter."
msgstr ""

#: ../../topics/request-response.rst:480
msgid "The ``formcss`` parameter."
msgstr ""

#: ../../topics/request-response.rst:483
msgid "The ``formid`` parameter."
msgstr ""

#: ../../topics/request-response.rst:487
msgid "Request usage examples"
msgstr ""

#: ../../topics/request-response.rst:490
msgid "Using FormRequest to send data via HTTP POST"
msgstr ""

#: ../../topics/request-response.rst:492
msgid "If you want to simulate a HTML Form POST in your spider and send a couple of key-value fields, you can return a :class:`FormRequest` object (from your spider) like this::"
msgstr ""

#: ../../topics/request-response.rst:503
msgid "Using FormRequest.from_response() to simulate a user login"
msgstr ""

#: ../../topics/request-response.rst:505
msgid "It is usual for web sites to provide pre-populated form fields through ``<input type=\"hidden\">`` elements, such as session related data or authentication tokens (for login pages). When scraping, you'll want these fields to be automatically pre-populated and only override a couple of them, such as the user name and password. You can use the :meth:`FormRequest.from_response` method for this job. Here's an example spider which uses it::"
msgstr ""

#: ../../topics/request-response.rst:539
msgid "JsonRequest"
msgstr ""

#: ../../topics/request-response.rst:541
msgid "The JsonRequest class extends the base :class:`Request` class with functionality for dealing with JSON requests."
msgstr ""

#: ../../topics/request-response.rst:546
msgid "The :class:`JsonRequest` class adds two new argument to the constructor. The remaining arguments are the same as for the :class:`Request` class and are not documented here."
msgstr ""

#: ../../topics/request-response.rst:550
msgid "Using the :class:`JsonRequest` will set the ``Content-Type`` header to ``application/json`` and ``Accept`` header to ``application/json, text/javascript, */*; q=0.01``"
msgstr ""

#: ../../topics/request-response.rst:553
msgid "is any JSON serializable object that needs to be JSON encoded and assigned to body. if :attr:`Request.body` argument is provided this parameter will be ignored. if :attr:`Request.body` argument is not provided and data argument is provided :attr:`Request.method` will be set to ``'POST'`` automatically."
msgstr ""

#: ../../topics/request-response.rst:559
msgid "Parameters that will be passed to underlying `json.dumps`_ method which is used to serialize data into JSON format."
msgstr ""

#: ../../topics/request-response.rst:566
msgid "JsonRequest usage example"
msgstr ""

#: ../../topics/request-response.rst:568
msgid "Sending a JSON POST request with a JSON payload::"
msgstr ""

#: ../../topics/request-response.rst:578
msgid "Response objects"
msgstr ""

#: ../../topics/request-response.rst:582
msgid "A :class:`Response` object represents an HTTP response, which is usually downloaded (by the Downloader) and fed to the Spiders for processing."
msgstr ""

#: ../../topics/request-response.rst:585
msgid "the URL of this response"
msgstr ""

#: ../../topics/request-response.rst:588
msgid "the HTTP status of the response. Defaults to ``200``."
msgstr ""

#: ../../topics/request-response.rst:591
msgid "the headers of this response. The dict values can be strings (for single valued headers) or lists (for multi-valued headers)."
msgstr ""

#: ../../topics/request-response.rst:595
msgid "the response body. To access the decoded text as str (unicode in Python 2) you can use ``response.text`` from an encoding-aware :ref:`Response subclass <topics-request-response-ref-response-subclasses>`, such as :class:`TextResponse`."
msgstr ""

#: ../../topics/request-response.rst:601
msgid "is a list containing the initial values for the :attr:`Response.flags` attribute. If given, the list will be shallow copied."
msgstr ""

#: ../../topics/request-response.rst:606
msgid "the initial value of the :attr:`Response.request` attribute. This represents the :class:`Request` that generated this response."
msgstr ""

#: ../../topics/request-response.rst:612
msgid "A string containing the URL of the response."
msgstr ""

#: ../../topics/request-response.rst:614
msgid "This attribute is read-only. To change the URL of a Response use :meth:`replace`."
msgstr ""

#: ../../topics/request-response.rst:619
msgid "An integer representing the HTTP status of the response. Example: ``200``, ``404``."
msgstr ""

#: ../../topics/request-response.rst:624
msgid "A dictionary-like object which contains the response headers. Values can be accessed using :meth:`get` to return the first header value with the specified name or :meth:`getlist` to return all header values with the specified name. For example, this call will give you all cookies in the headers::"
msgstr ""

#: ../../topics/request-response.rst:634
msgid "The body of this Response. Keep in mind that Response.body is always a bytes object. If you want the unicode version use :attr:`TextResponse.text` (only available in :class:`TextResponse` and subclasses)."
msgstr ""

#: ../../topics/request-response.rst:639
msgid "This attribute is read-only. To change the body of a Response use :meth:`replace`."
msgstr ""

#: ../../topics/request-response.rst:644
msgid "The :class:`Request` object that generated this response. This attribute is assigned in the Scrapy engine, after the response and the request have passed through all :ref:`Downloader Middlewares <topics-downloader-middleware>`. In particular, this means that:"
msgstr ""

#: ../../topics/request-response.rst:649
msgid "HTTP redirections will cause the original request (to the URL before redirection) to be assigned to the redirected response (with the final URL after redirection)."
msgstr ""

#: ../../topics/request-response.rst:653
msgid "Response.request.url doesn't always equal Response.url"
msgstr ""

#: ../../topics/request-response.rst:655
msgid "This attribute is only available in the spider code, and in the :ref:`Spider Middlewares <topics-spider-middleware>`, but not in Downloader Middlewares (although you have the Request available there by other means) and handlers of the :signal:`response_downloaded` signal."
msgstr ""

#: ../../topics/request-response.rst:662
msgid "A shortcut to the :attr:`Request.meta` attribute of the :attr:`Response.request` object (ie. ``self.request.meta``)."
msgstr ""

#: ../../topics/request-response.rst:665
msgid "Unlike the :attr:`Response.request` attribute, the :attr:`Response.meta` attribute is propagated along redirects and retries, so you will get the original :attr:`Request.meta` sent from your spider."
msgstr ""

#: ../../topics/request-response.rst:669
msgid ":attr:`Request.meta` attribute"
msgstr ""

#: ../../topics/request-response.rst:673
msgid "A list that contains flags for this response. Flags are labels used for tagging Responses. For example: ``'cached'``, ``'redirected``', etc. And they're shown on the string representation of the Response (`__str__` method) which is used by the engine for logging."
msgstr ""

#: ../../topics/request-response.rst:680
msgid "Returns a new Response which is a copy of this Response."
msgstr ""

#: ../../topics/request-response.rst:684
msgid "Returns a Response object with the same members, except for those members given new values by whichever keyword arguments are specified. The attribute :attr:`Response.meta` is copied by default."
msgstr ""

#: ../../topics/request-response.rst:690
msgid "Constructs an absolute url by combining the Response's :attr:`url` with a possible relative url."
msgstr ""

#: ../../topics/request-response.rst:693
msgid "This is a wrapper over `urlparse.urljoin`_, it's merely an alias for making this call::"
msgstr ""

#: ../../topics/request-response.rst:706
msgid "Response subclasses"
msgstr ""

#: ../../topics/request-response.rst:708
msgid "Here is the list of available built-in Response subclasses. You can also subclass the Response class to implement your own functionality."
msgstr ""

#: ../../topics/request-response.rst:712
msgid "TextResponse objects"
msgstr ""

#: ../../topics/request-response.rst:716
msgid ":class:`TextResponse` objects adds encoding capabilities to the base :class:`Response` class, which is meant to be used only for binary data, such as images, sounds or any media file."
msgstr ""

#: ../../topics/request-response.rst:720
msgid ":class:`TextResponse` objects support a new constructor argument, in addition to the base :class:`Response` objects. The remaining functionality is the same as for the :class:`Response` class and is not documented here."
msgstr ""

#: ../../topics/request-response.rst:724
msgid "is a string which contains the encoding to use for this response. If you create a :class:`TextResponse` object with a unicode body, it will be encoded using this encoding (remember the body attribute is always a string). If ``encoding`` is ``None`` (default value), the encoding will be looked up in the response headers and body instead."
msgstr ""

#: ../../topics/request-response.rst:731
msgid ":class:`TextResponse` objects support the following attributes in addition to the standard :class:`Response` ones:"
msgstr ""

#: ../../topics/request-response.rst:736
msgid "Response body, as unicode."
msgstr ""

#: ../../topics/request-response.rst:738
msgid "The same as ``response.body.decode(response.encoding)``, but the result is cached after the first call, so you can access ``response.text`` multiple times without extra overhead."
msgstr ""

#: ../../topics/request-response.rst:744
msgid "``unicode(response.body)`` is not a correct way to convert response body to unicode: you would be using the system default encoding (typically ``ascii``) instead of the response encoding."
msgstr ""

#: ../../topics/request-response.rst:751
msgid "A string with the encoding of this response. The encoding is resolved by trying the following mechanisms, in order:"
msgstr ""

#: ../../topics/request-response.rst:754
msgid "the encoding passed in the constructor ``encoding`` argument"
msgstr ""

#: ../../topics/request-response.rst:756
msgid "the encoding declared in the Content-Type HTTP header. If this encoding is not valid (ie. unknown), it is ignored and the next resolution mechanism is tried."
msgstr ""

#: ../../topics/request-response.rst:760
msgid "the encoding declared in the response body. The TextResponse class doesn't provide any special functionality for this. However, the :class:`HtmlResponse` and :class:`XmlResponse` classes do."
msgstr ""

#: ../../topics/request-response.rst:764
msgid "the encoding inferred by looking at the response body. This is the more fragile method but also the last one tried."
msgstr ""

#: ../../topics/request-response.rst:769
msgid "A :class:`~scrapy.selector.Selector` instance using the response as target. The selector is lazily instantiated on first access."
msgstr ""

#: ../../topics/request-response.rst:772
msgid ":class:`TextResponse` objects support the following methods in addition to the standard :class:`Response` ones:"
msgstr ""

#: ../../topics/request-response.rst:777
msgid "A shortcut to ``TextResponse.selector.xpath(query)``::"
msgstr ""

#: ../../topics/request-response.rst:783
msgid "A shortcut to ``TextResponse.selector.css(query)``::"
msgstr ""

#: ../../topics/request-response.rst:791
msgid "The same as :attr:`text`, but available as a method. This method is kept for backward compatibility; please prefer ``response.text``."
msgstr ""

#: ../../topics/request-response.rst:796
msgid "HtmlResponse objects"
msgstr ""

#: ../../topics/request-response.rst:800
msgid "The :class:`HtmlResponse` class is a subclass of :class:`TextResponse` which adds encoding auto-discovering support by looking into the HTML `meta http-equiv`_ attribute.  See :attr:`TextResponse.encoding`."
msgstr ""

#: ../../topics/request-response.rst:807
msgid "XmlResponse objects"
msgstr ""

#: ../../topics/request-response.rst:811
msgid "The :class:`XmlResponse` class is a subclass of :class:`TextResponse` which adds encoding auto-discovering support by looking into the XML declaration line.  See :attr:`TextResponse.encoding`."
msgstr ""

