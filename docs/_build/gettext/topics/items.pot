# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008â€“2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-10 09:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/items.rst:5
msgid "Items"
msgstr ""

#: ../../topics/items.rst:10
msgid "The main goal in scraping is to extract structured data from unstructured sources, typically, web pages. Scrapy spiders can return the extracted data as Python dicts. While convenient and familiar, Python dicts lack structure: it is easy to make a typo in a field name or return inconsistent data, especially in a larger project with many spiders."
msgstr ""

#: ../../topics/items.rst:16
msgid "To define common output data format Scrapy provides the :class:`Item` class. :class:`Item` objects are simple containers used to collect the scraped data. They provide a `dictionary-like`_ API with a convenient syntax for declaring their available fields."
msgstr ""

#: ../../topics/items.rst:21
msgid "Various Scrapy components use extra information provided by Items: exporters look at declared fields to figure out columns to export, serialization can be customized using Item fields metadata, :mod:`trackref` tracks Item instances to help find memory leaks (see :ref:`topics-leaks-trackrefs`), etc."
msgstr ""

#: ../../topics/items.rst:32
msgid "Declaring Items"
msgstr ""

#: ../../topics/items.rst:34
msgid "Items are declared using a simple class definition syntax and :class:`Field` objects. Here is an example::"
msgstr ""

#: ../../topics/items.rst:46
msgid "Those familiar with `Django`_ will notice that Scrapy Items are declared similar to `Django Models`_, except that Scrapy Items are much simpler as there is no concept of different field types."
msgstr ""

#: ../../topics/items.rst:56
msgid "Item Fields"
msgstr ""

#: ../../topics/items.rst:58
msgid ":class:`Field` objects are used to specify metadata for each field. For example, the serializer function for the ``last_updated`` field illustrated in the example above."
msgstr ""

#: ../../topics/items.rst:62
msgid "You can specify any kind of metadata for each field. There is no restriction on the values accepted by :class:`Field` objects. For this same reason, there is no reference list of all available metadata keys. Each key defined in :class:`Field` objects could be used by a different component, and only those components know about it. You can also define and use any other :class:`Field` key in your project too, for your own needs. The main goal of :class:`Field` objects is to provide a way to define all field metadata in one place. Typically, those components whose behaviour depends on each field use certain field keys to configure that behaviour. You must refer to their documentation to see which metadata keys are used by each component."
msgstr ""

#: ../../topics/items.rst:73
msgid "It's important to note that the :class:`Field` objects used to declare the item do not stay assigned as class attributes. Instead, they can be accessed through the :attr:`Item.fields` attribute."
msgstr ""

#: ../../topics/items.rst:78
msgid "Working with Items"
msgstr ""

#: ../../topics/items.rst:80
msgid "Here are some examples of common tasks performed with items, using the ``Product`` item :ref:`declared above  <topics-items-declaring>`. You will notice the API is very similar to the `dict API`_."
msgstr ""

#: ../../topics/items.rst:85
msgid "Creating items"
msgstr ""

#: ../../topics/items.rst:94
msgid "Getting field values"
msgstr ""

#: ../../topics/items.rst:135
msgid "Setting field values"
msgstr ""

#: ../../topics/items.rst:149
msgid "Accessing all populated values"
msgstr ""

#: ../../topics/items.rst:151
msgid "To access all populated values, just use the typical `dict API`_::"
msgstr ""

#: ../../topics/items.rst:163
msgid "Copying items"
msgstr ""

#: ../../topics/items.rst:165
msgid "To copy an item, you must first decide whether you want a shallow copy or a deep copy."
msgstr ""

#: ../../topics/items.rst:168
msgid "If your item contains mutable_ values like lists or dictionaries, a shallow copy will keep references to the same mutable values across all different copies."
msgstr ""

#: ../../topics/items.rst:174
msgid "For example, if you have an item with a list of tags, and you create a shallow copy of that item, both the original item and the copy have the same list of tags. Adding a tag to the list of one of the items will add the tag to the other item as well."
msgstr ""

#: ../../topics/items.rst:179
msgid "If that is not the desired behavior, use a deep copy instead."
msgstr ""

#: ../../topics/items.rst:181
msgid "See the `documentation of the copy module`_ for more information."
msgstr ""

#: ../../topics/items.rst:185
msgid "To create a shallow copy of an item, you can either call :meth:`~scrapy.item.Item.copy` on an existing item (``product2 = product.copy()``) or instantiate your item class from an existing item (``product2 = Product(product)``)."
msgstr ""

#: ../../topics/items.rst:190
msgid "To create a deep copy, call :meth:`~scrapy.item.Item.deepcopy` instead (``product2 = product.deepcopy()``)."
msgstr ""

#: ../../topics/items.rst:195
msgid "Other common tasks"
msgstr ""

#: ../../topics/items.rst:197
msgid "Creating dicts from items::"
msgstr ""

#: ../../topics/items.rst:202
msgid "Creating items from dicts::"
msgstr ""

#: ../../topics/items.rst:213
msgid "Extending Items"
msgstr ""

#: ../../topics/items.rst:215
msgid "You can extend Items (to add more fields or to change some metadata for some fields) by declaring a subclass of your original Item."
msgstr ""

#: ../../topics/items.rst:218
msgid "For example::"
msgstr ""

#: ../../topics/items.rst:224
msgid "You can also extend field metadata by using the previous field metadata and appending more values, or changing existing values, like this::"
msgstr ""

#: ../../topics/items.rst:230
msgid "That adds (or replaces) the ``serializer`` metadata key for the ``name`` field, keeping all the previously existing metadata values."
msgstr ""

#: ../../topics/items.rst:234
msgid "Item objects"
msgstr ""

#: ../../topics/items.rst:238
msgid "Return a new Item optionally initialized from the given argument."
msgstr ""

#: ../../topics/items.rst:240
msgid "Items replicate the standard `dict API`_, including its constructor. The only additional attribute provided by Items is:"
msgstr ""

#: ../../topics/items.rst:245
msgid "A dictionary containing *all declared fields* for this Item, not only those populated. The keys are the field names and the values are the :class:`Field` objects used in the :ref:`Item declaration <topics-items-declaring>`."
msgstr ""

#: ../../topics/items.rst:253
msgid "Field objects"
msgstr ""

#: ../../topics/items.rst:257
msgid "The :class:`Field` class is just an alias to the built-in `dict`_ class and doesn't provide any extra functionality or attributes. In other words, :class:`Field` objects are plain-old Python dicts. A separate class is used to support the :ref:`item declaration syntax <topics-items-declaring>` based on class attributes."
msgstr ""

