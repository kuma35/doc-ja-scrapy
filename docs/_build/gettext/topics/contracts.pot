# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008–2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-10 09:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/contracts.rst:5
msgid "Spiders Contracts"
msgstr ""

#: ../../topics/contracts.rst:9
msgid "This is a new feature (introduced in Scrapy 0.15) and may be subject to minor functionality/API updates. Check the :ref:`release notes <news>` to be notified of updates."
msgstr ""

#: ../../topics/contracts.rst:13
msgid "Testing spiders can get particularly annoying and while nothing prevents you from writing unit tests the task gets cumbersome quickly. Scrapy offers an integrated way of testing your spiders by the means of contracts."
msgstr ""

#: ../../topics/contracts.rst:17
msgid "This allows you to test each callback of your spider by hardcoding a sample url and check various constraints for how the callback processes the response. Each contract is prefixed with an ``@`` and included in the docstring. See the following example::"
msgstr ""

#: ../../topics/contracts.rst:32
msgid "This callback is tested using three built-in contracts:"
msgstr ""

#: ../../topics/contracts.rst:38
msgid "This contract (``@url``) sets the sample URL used when checking other contract conditions for this spider. This contract is mandatory. All callbacks lacking this contract are ignored when running the checks::"
msgstr ""

#: ../../topics/contracts.rst:46
msgid "This contract (``@cb_kwargs``) sets the :attr:`cb_kwargs <scrapy.http.Request.cb_kwargs>` attribute for the sample request. It must be a valid JSON dictionary. ::"
msgstr ""

#: ../../topics/contracts.rst:54
msgid "This contract (``@returns``) sets lower and upper bounds for the items and requests returned by the spider. The upper bound is optional::"
msgstr ""

#: ../../topics/contracts.rst:61
msgid "This contract (``@scrapes``) checks that all the items returned by the callback have the specified fields::"
msgstr ""

#: ../../topics/contracts.rst:66
msgid "Use the :command:`check` command to run the contract checks."
msgstr ""

#: ../../topics/contracts.rst:69
msgid "Custom Contracts"
msgstr ""

#: ../../topics/contracts.rst:71
msgid "If you find you need more power than the built-in scrapy contracts you can create and load your own contracts in the project by using the :setting:`SPIDER_CONTRACTS` setting::"
msgstr ""

#: ../../topics/contracts.rst:80
msgid "Each contract must inherit from :class:`~scrapy.contracts.Contract` and can override three methods:"
msgstr ""

#: ../../topics/contracts.rst:0
msgid "パラメータ"
msgstr ""

#: ../../topics/contracts.rst:87
msgid "callback function to which the contract is associated"
msgstr ""

#: ../../topics/contracts.rst:90
msgid "list of arguments passed into the docstring (whitespace separated)"
msgstr ""

#: ../../topics/contracts.rst:96
msgid "This receives a ``dict`` as an argument containing default arguments for request object. :class:`~scrapy.http.Request` is used by default, but this can be changed with the ``request_cls`` attribute. If multiple contracts in chain have this attribute defined, the last one is used."
msgstr ""

#: ../../topics/contracts.rst:101
msgid "Must return the same or a modified version of it."
msgstr ""

#: ../../topics/contracts.rst:105
msgid "This allows hooking in various checks on the response received from the sample request, before it's being passed to the callback."
msgstr ""

#: ../../topics/contracts.rst:110
msgid "This allows processing the output of the callback. Iterators are converted listified before being passed to this hook."
msgstr ""

#: ../../topics/contracts.rst:113
msgid "Raise :class:`~scrapy.exceptions.ContractFail` from :class:`~scrapy.contracts.Contract.pre_process` or :class:`~scrapy.contracts.Contract.post_process` if expectations are not met:"
msgstr ""

#: ../../topics/contracts.rst:119
msgid "Here is a demo contract which checks the presence of a custom header in the response received::"
msgstr ""

#: ../../topics/contracts.rst:140
msgid "Detecting check runs"
msgstr ""

#: ../../topics/contracts.rst:142
msgid "When ``scrapy check`` is running, the ``SCRAPY_CHECK`` environment variable is set to the ``true`` string. You can use `os.environ`_ to perform any change to your spiders or your settings when ``scrapy check`` is used::"
msgstr ""

