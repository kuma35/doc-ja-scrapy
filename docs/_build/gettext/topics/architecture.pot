# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008â€“2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-10 09:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/architecture.rst:5
msgid "Architecture overview"
msgstr ""

#: ../../topics/architecture.rst:7
msgid "This document describes the architecture of Scrapy and how its components interact."
msgstr ""

#: ../../topics/architecture.rst:11
msgid "Overview"
msgstr ""

#: ../../topics/architecture.rst:13
msgid "The following diagram shows an overview of the Scrapy architecture with its components and an outline of the data flow that takes place inside the system (shown by the red arrows). A brief description of the components is included below with links for more detailed information about them. The data flow is also described below."
msgstr ""

#: ../../topics/architecture.rst:22
msgid "Data flow"
msgstr ""

#: ../../topics/architecture.rst:29
msgid "The data flow in Scrapy is controlled by the execution engine, and goes like this:"
msgstr ""

#: ../../topics/architecture.rst:32
msgid "The :ref:`Engine <component-engine>` gets the initial Requests to crawl from the :ref:`Spider <component-spiders>`."
msgstr ""

#: ../../topics/architecture.rst:35
msgid "The :ref:`Engine <component-engine>` schedules the Requests in the :ref:`Scheduler <component-scheduler>` and asks for the next Requests to crawl."
msgstr ""

#: ../../topics/architecture.rst:39
msgid "The :ref:`Scheduler <component-scheduler>` returns the next Requests to the :ref:`Engine <component-engine>`."
msgstr ""

#: ../../topics/architecture.rst:42
msgid "The :ref:`Engine <component-engine>` sends the Requests to the :ref:`Downloader <component-downloader>`, passing through the :ref:`Downloader Middlewares <component-downloader-middleware>` (see :meth:`~scrapy.downloadermiddlewares.DownloaderMiddleware.process_request`)."
msgstr ""

#: ../../topics/architecture.rst:47
msgid "Once the page finishes downloading the :ref:`Downloader <component-downloader>` generates a Response (with that page) and sends it to the Engine, passing through the :ref:`Downloader Middlewares <component-downloader-middleware>` (see :meth:`~scrapy.downloadermiddlewares.DownloaderMiddleware.process_response`)."
msgstr ""

#: ../../topics/architecture.rst:53
msgid "The :ref:`Engine <component-engine>` receives the Response from the :ref:`Downloader <component-downloader>` and sends it to the :ref:`Spider <component-spiders>` for processing, passing through the :ref:`Spider Middleware <component-spider-middleware>` (see :meth:`~scrapy.spidermiddlewares.SpiderMiddleware.process_spider_input`)."
msgstr ""

#: ../../topics/architecture.rst:59
msgid "The :ref:`Spider <component-spiders>` processes the Response and returns scraped items and new Requests (to follow) to the :ref:`Engine <component-engine>`, passing through the :ref:`Spider Middleware <component-spider-middleware>` (see :meth:`~scrapy.spidermiddlewares.SpiderMiddleware.process_spider_output`)."
msgstr ""

#: ../../topics/architecture.rst:65
msgid "The :ref:`Engine <component-engine>` sends processed items to :ref:`Item Pipelines <component-pipelines>`, then send processed Requests to the :ref:`Scheduler <component-scheduler>` and asks for possible next Requests to crawl."
msgstr ""

#: ../../topics/architecture.rst:70
msgid "The process repeats (from step 1) until there are no more requests from the :ref:`Scheduler <component-scheduler>`."
msgstr ""

#: ../../topics/architecture.rst:74
msgid "Components"
msgstr ""

#: ../../topics/architecture.rst:79
msgid "Scrapy Engine"
msgstr ""

#: ../../topics/architecture.rst:81
msgid "The engine is responsible for controlling the data flow between all components of the system, and triggering events when certain actions occur. See the :ref:`Data Flow <data-flow>` section above for more details."
msgstr ""

#: ../../topics/architecture.rst:88
msgid "Scheduler"
msgstr ""

#: ../../topics/architecture.rst:90
msgid "The Scheduler receives requests from the engine and enqueues them for feeding them later (also to the engine) when the engine requests them."
msgstr ""

#: ../../topics/architecture.rst:96
msgid "Downloader"
msgstr ""

#: ../../topics/architecture.rst:98
msgid "The Downloader is responsible for fetching web pages and feeding them to the engine which, in turn, feeds them to the spiders."
msgstr ""

#: ../../topics/architecture.rst:104
msgid "Spiders"
msgstr ""

#: ../../topics/architecture.rst:106
msgid "Spiders are custom classes written by Scrapy users to parse responses and extract items (aka scraped items) from them or additional requests to follow. For more information see :ref:`topics-spiders`."
msgstr ""

#: ../../topics/architecture.rst:113
msgid "Item Pipeline"
msgstr ""

#: ../../topics/architecture.rst:115
msgid "The Item Pipeline is responsible for processing the items once they have been extracted (or scraped) by the spiders. Typical tasks include cleansing, validation and persistence (like storing the item in a database). For more information see :ref:`topics-item-pipeline`."
msgstr ""

#: ../../topics/architecture.rst:123
msgid "Downloader middlewares"
msgstr ""

#: ../../topics/architecture.rst:125
msgid "Downloader middlewares are specific hooks that sit between the Engine and the Downloader and process requests when they pass from the Engine to the Downloader, and responses that pass from Downloader to the Engine."
msgstr ""

#: ../../topics/architecture.rst:129
msgid "Use a Downloader middleware if you need to do one of the following:"
msgstr ""

#: ../../topics/architecture.rst:131
msgid "process a request just before it is sent to the Downloader (i.e. right before Scrapy sends the request to the website);"
msgstr ""

#: ../../topics/architecture.rst:133
msgid "change received response before passing it to a spider;"
msgstr ""

#: ../../topics/architecture.rst:134
msgid "send a new Request instead of passing received response to a spider;"
msgstr ""

#: ../../topics/architecture.rst:135
msgid "pass response to a spider without fetching a web page;"
msgstr ""

#: ../../topics/architecture.rst:136
msgid "silently drop some requests."
msgstr ""

#: ../../topics/architecture.rst:138
msgid "For more information see :ref:`topics-downloader-middleware`."
msgstr ""

#: ../../topics/architecture.rst:143
msgid "Spider middlewares"
msgstr ""

#: ../../topics/architecture.rst:145
msgid "Spider middlewares are specific hooks that sit between the Engine and the Spiders and are able to process spider input (responses) and output (items and requests)."
msgstr ""

#: ../../topics/architecture.rst:149
msgid "Use a Spider middleware if you need to"
msgstr ""

#: ../../topics/architecture.rst:151
msgid "post-process output of spider callbacks - change/add/remove requests or items;"
msgstr ""

#: ../../topics/architecture.rst:152
msgid "post-process start_requests;"
msgstr ""

#: ../../topics/architecture.rst:153
msgid "handle spider exceptions;"
msgstr ""

#: ../../topics/architecture.rst:154
msgid "call errback instead of callback for some of the requests based on response content."
msgstr ""

#: ../../topics/architecture.rst:157
msgid "For more information see :ref:`topics-spider-middleware`."
msgstr ""

#: ../../topics/architecture.rst:160
msgid "Event-driven networking"
msgstr ""

#: ../../topics/architecture.rst:162
msgid "Scrapy is written with `Twisted`_, a popular event-driven networking framework for Python. Thus, it's implemented using a non-blocking (aka asynchronous) code for concurrency."
msgstr ""

#: ../../topics/architecture.rst:166
msgid "For more information about asynchronous programming and Twisted see these links:"
msgstr ""

#: ../../topics/architecture.rst:169
msgid "`Introduction to Deferreds in Twisted`_"
msgstr ""

#: ../../topics/architecture.rst:170
msgid "`Twisted - hello, asynchronous programming`_"
msgstr ""

#: ../../topics/architecture.rst:171
msgid "`Twisted Introduction - Krondo`_"
msgstr ""

