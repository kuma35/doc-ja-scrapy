# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008–2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-10 09:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../topics/exporters.rst:5
msgid "Item Exporters"
msgstr ""

#: ../../topics/exporters.rst:10
msgid ""
"Once you have scraped your items, you often want to persist or export "
"those items, to use the data in some other application. That is, after "
"all, the whole purpose of the scraping process."
msgstr ""

#: ../../topics/exporters.rst:14
msgid ""
"For this purpose Scrapy provides a collection of Item Exporters for "
"different output formats, such as XML, CSV or JSON."
msgstr ""

#: ../../topics/exporters.rst:18
msgid "Using Item Exporters"
msgstr ""

#: ../../topics/exporters.rst:20
msgid ""
"If you are in a hurry, and just want to use an Item Exporter to output "
"scraped data see the :ref:`topics-feed-exports`. Otherwise, if you want "
"to know how Item Exporters work or need more custom functionality (not "
"covered by the default exports), continue reading below."
msgstr ""

#: ../../topics/exporters.rst:25
msgid ""
"In order to use an Item Exporter, you  must instantiate it with its "
"required args. Each Item Exporter requires different arguments, so check "
"each exporter documentation to be sure, in :ref:`topics-exporters-"
"reference`. After you have instantiated your exporter, you have to:"
msgstr ""

#: ../../topics/exporters.rst:30
msgid ""
"1. call the method :meth:`~BaseItemExporter.start_exporting` in order to "
"signal the beginning of the exporting process"
msgstr ""

#: ../../topics/exporters.rst:33
msgid ""
"2. call the :meth:`~BaseItemExporter.export_item` method for each item "
"you want to export"
msgstr ""

#: ../../topics/exporters.rst:36
msgid ""
"3. and finally call the :meth:`~BaseItemExporter.finish_exporting` to "
"signal the end of the exporting process"
msgstr ""

#: ../../topics/exporters.rst:39
msgid ""
"Here you can see an :doc:`Item Pipeline <item-pipeline>` which uses "
"multiple Item Exporters to group scraped items to different files "
"according to the value of one of their fields::"
msgstr ""

#: ../../topics/exporters.rst:74
msgid "Serialization of item fields"
msgstr ""

#: ../../topics/exporters.rst:76
msgid ""
"By default, the field values are passed unmodified to the underlying "
"serialization library, and the decision of how to serialize them is "
"delegated to each particular serialization library."
msgstr ""

#: ../../topics/exporters.rst:80
msgid ""
"However, you can customize how each field value is serialized *before it "
"is passed to the serialization library*."
msgstr ""

#: ../../topics/exporters.rst:83
msgid ""
"There are two ways to customize how a field will be serialized, which are"
" described next."
msgstr ""

#: ../../topics/exporters.rst:89
msgid "1. Declaring a serializer in the field"
msgstr ""

#: ../../topics/exporters.rst:91
msgid ""
"If you use :class:`~.Item` you can declare a serializer in the "
":ref:`field metadata <topics-items-fields>`. The serializer must be a "
"callable which receives a value and returns its serialized form."
msgstr ""

#: ../../topics/exporters.rst:95 ../../topics/exporters.rst:116
msgid "Example::"
msgstr ""

#: ../../topics/exporters.rst:108
msgid "2. Overriding the serialize_field() method"
msgstr ""

#: ../../topics/exporters.rst:110
msgid ""
"You can also override the :meth:`~BaseItemExporter.serialize_field()` "
"method to customize how your field value will be exported."
msgstr ""

#: ../../topics/exporters.rst:113
msgid ""
"Make sure you call the base class "
":meth:`~BaseItemExporter.serialize_field()` method after your custom "
"code."
msgstr ""

#: ../../topics/exporters.rst:130
msgid "Built-in Item Exporters reference"
msgstr ""

#: ../../topics/exporters.rst:132
msgid ""
"Here is a list of the Item Exporters bundled with Scrapy. Some of them "
"contain output examples, which assume you're exporting these two items::"
msgstr ""

#: ../../topics/exporters.rst:139
msgid "BaseItemExporter"
msgstr ""

#: ../../topics/exporters.rst:143
msgid ""
"This is the (abstract) base class for all Item Exporters. It provides "
"support for common features used by all (concrete) Item Exporters, such "
"as defining what fields to export, whether to export empty fields, or "
"which encoding to use."
msgstr ""

#: ../../topics/exporters.rst:148
msgid ""
"These features can be configured through the constructor arguments which "
"populate their respective instance attributes: :attr:`fields_to_export`, "
":attr:`export_empty_fields`, :attr:`encoding`, :attr:`indent`."
msgstr ""

#: ../../topics/exporters.rst:154
msgid "Exports the given item. This method must be implemented in subclasses."
msgstr ""

#: ../../topics/exporters.rst:158
msgid ""
"Return the serialized value for the given field. You can override this "
"method (in your custom Item Exporters) if you want to control how a "
"particular field or value will be serialized/exported."
msgstr ""

#: ../../topics/exporters.rst:162
msgid ""
"By default, this method looks for a serializer :ref:`declared in the item"
" field <topics-exporters-serializers>` and returns the result of applying"
" that serializer to the value. If no serializer is found, it returns the "
"value unchanged except for ``unicode`` values which are encoded to "
"``str`` using the encoding declared in the :attr:`encoding` attribute."
msgstr ""

#: ../../topics/exporters.rst
msgid "パラメータ"
msgstr ""

#: ../../topics/exporters.rst:168
msgid ""
"the field being serialized. If a raw dict is being exported (not "
":class:`~.Item`) *field* value is an empty dict."
msgstr ""

#: ../../topics/exporters.rst:172
msgid "the name of the field being serialized"
msgstr ""

#: ../../topics/exporters.rst:175
msgid "the value being serialized"
msgstr ""

#: ../../topics/exporters.rst:179
msgid ""
"Signal the beginning of the exporting process. Some exporters may use "
"this to generate some required header (for example, the "
":class:`XmlItemExporter`). You must call this method before exporting any"
" items."
msgstr ""

#: ../../topics/exporters.rst:186
msgid ""
"Signal the end of the exporting process. Some exporters may use this to "
"generate some required footer (for example, the "
":class:`XmlItemExporter`). You must always call this method after you "
"have no more items to export."
msgstr ""

#: ../../topics/exporters.rst:193
msgid ""
"A list with the name of the fields that will be exported, or None if you "
"want to export all fields. Defaults to None."
msgstr ""

#: ../../topics/exporters.rst:196
msgid ""
"Some exporters (like :class:`CsvItemExporter`) respect the order of the "
"fields defined in this attribute."
msgstr ""

#: ../../topics/exporters.rst:199
msgid ""
"Some exporters may require fields_to_export list in order to export the "
"data properly when spiders return dicts (not :class:`~Item` instances)."
msgstr ""

#: ../../topics/exporters.rst:204
msgid ""
"Whether to include empty/unpopulated item fields in the exported data. "
"Defaults to ``False``. Some exporters (like :class:`CsvItemExporter`) "
"ignore this attribute and always export all empty fields."
msgstr ""

#: ../../topics/exporters.rst:208
msgid "This option is ignored for dict items."
msgstr ""

#: ../../topics/exporters.rst:212
msgid ""
"The encoding that will be used to encode unicode values. This only "
"affects unicode values (which are always serialized to str using this "
"encoding). Other value types are passed unchanged to the specific "
"serialization library."
msgstr ""

#: ../../topics/exporters.rst:219
msgid ""
"Amount of spaces used to indent the output on each level. Defaults to "
"``0``."
msgstr ""

#: ../../topics/exporters.rst:221
msgid ""
"``indent=None`` selects the most compact representation, all items in the"
" same line with no indentation"
msgstr ""

#: ../../topics/exporters.rst:223
msgid "``indent<=0`` each item on its own line, no indentation"
msgstr ""

#: ../../topics/exporters.rst:224
msgid ""
"``indent>0`` each item on its own line, indented with the provided "
"numeric value"
msgstr ""

#: ../../topics/exporters.rst:227
msgid "PythonItemExporter"
msgstr ""

#: ../../topics/exporters.rst:235
msgid "XmlItemExporter"
msgstr ""

#: ../../topics/exporters.rst:239
msgid "Exports Items in XML format to the specified file object."
msgstr ""

#: ../../topics/exporters.rst:241 ../../topics/exporters.rst:298
#: ../../topics/exporters.rst:330 ../../topics/exporters.rst:352
#: ../../topics/exporters.rst:376 ../../topics/exporters.rst:407
msgid ""
"the file-like object to use for exporting the data. Its ``write`` method "
"should accept ``bytes`` (a disk file opened in binary mode, a "
"``io.BytesIO`` object, etc)"
msgstr ""

#: ../../topics/exporters.rst:244
msgid "The name of root element in the exported XML."
msgstr ""

#: ../../topics/exporters.rst:247
msgid "The name of each item element in the exported XML."
msgstr ""

#: ../../topics/exporters.rst:250 ../../topics/exporters.rst:338
#: ../../topics/exporters.rst:355
msgid ""
"The additional keyword arguments of this constructor are passed to the "
":class:`BaseItemExporter` constructor."
msgstr ""

#: ../../topics/exporters.rst:253 ../../topics/exporters.rst:315
#: ../../topics/exporters.rst:358 ../../topics/exporters.rst:379
#: ../../topics/exporters.rst:410
msgid "A typical output of this exporter would be::"
msgstr ""

#: ../../topics/exporters.rst:267
msgid ""
"Unless overridden in the :meth:`serialize_field` method, multi-valued "
"fields are exported by serializing each value inside a ``<value>`` "
"element. This is for convenience, as multi-valued fields are very common."
msgstr ""

#: ../../topics/exporters.rst:271
msgid "For example, the item::"
msgstr ""

#: ../../topics/exporters.rst:275
msgid "Would be serialized as::"
msgstr ""

#: ../../topics/exporters.rst:289
msgid "CsvItemExporter"
msgstr ""

#: ../../topics/exporters.rst:293
msgid ""
"Exports Items in CSV format to the given file-like object. If the "
":attr:`fields_to_export` attribute is set, it will be used to define the "
"CSV columns and their order. The :attr:`export_empty_fields` attribute "
"has no effect on this exporter."
msgstr ""

#: ../../topics/exporters.rst:301
msgid ""
"If enabled, makes the exporter output a header line with the field names "
"taken from :attr:`BaseItemExporter.fields_to_export` or the first "
"exported item fields."
msgstr ""

#: ../../topics/exporters.rst:306
msgid ""
"The char (or chars) that will be used for joining multi-valued fields, if"
" found."
msgstr ""

#: ../../topics/exporters.rst:310
msgid ""
"The additional keyword arguments of this constructor are passed to the "
":class:`BaseItemExporter` constructor, and the leftover arguments to the "
"`csv.writer`_ constructor, so you can use any ``csv.writer`` constructor "
"argument to customize this exporter."
msgstr ""

#: ../../topics/exporters.rst:324
msgid "PickleItemExporter"
msgstr ""

#: ../../topics/exporters.rst:328
msgid "Exports Items in pickle format to the given file-like object."
msgstr ""

#: ../../topics/exporters.rst:333
msgid "The pickle protocol to use."
msgstr ""

#: ../../topics/exporters.rst:336
msgid "For more information, refer to the `pickle module documentation`_."
msgstr ""

#: ../../topics/exporters.rst:341
msgid "Pickle isn't a human readable format, so no output examples are provided."
msgstr ""

#: ../../topics/exporters.rst:346
msgid "PprintItemExporter"
msgstr ""

#: ../../topics/exporters.rst:350
msgid "Exports Items in pretty print format to the specified file object."
msgstr ""

#: ../../topics/exporters.rst:363
msgid "Longer lines (when present) are pretty-formatted."
msgstr ""

#: ../../topics/exporters.rst:366
msgid "JsonItemExporter"
msgstr ""

#: ../../topics/exporters.rst:370
msgid ""
"Exports Items in JSON format to the specified file-like object, writing "
"all objects as a list of objects. The additional constructor arguments "
"are passed to the :class:`BaseItemExporter` constructor, and the leftover"
" arguments to the `JSONEncoder`_ constructor, so you can use any "
"`JSONEncoder`_ constructor argument to customize this exporter."
msgstr ""

#: ../../topics/exporters.rst:386
msgid ""
"JSON is very simple and flexible serialization format, but it doesn't "
"scale well for large amounts of data since incremental (aka. stream-mode)"
" parsing is not well supported (if at all) among JSON parsers (on any "
"language), and most of them just parse the entire object in memory. If "
"you want the power and simplicity of JSON with a more stream-friendly "
"format, consider using :class:`JsonLinesItemExporter` instead, or "
"splitting the output in multiple chunks."
msgstr ""

#: ../../topics/exporters.rst:397
msgid "JsonLinesItemExporter"
msgstr ""

#: ../../topics/exporters.rst:401
msgid ""
"Exports Items in JSON format to the specified file-like object, writing "
"one JSON-encoded item per line. The additional constructor arguments are "
"passed to the :class:`BaseItemExporter` constructor, and the leftover "
"arguments to the `JSONEncoder`_ constructor, so you can use any "
"`JSONEncoder`_ constructor argument to customize this exporter."
msgstr ""

#: ../../topics/exporters.rst:415
msgid ""
"Unlike the one produced by :class:`JsonItemExporter`, the format produced"
" by this exporter is well suited for serializing large amounts of data."
msgstr ""

#: ../../topics/exporters.rst:421
msgid "MarshalItemExporter"
msgstr ""

