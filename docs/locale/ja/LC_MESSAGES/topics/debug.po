# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008â€“2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-10 09:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../topics/debug.rst:5
msgid "Debugging Spiders"
msgstr ""

#: ../../topics/debug.rst:7
msgid ""
"This document explains the most common techniques for debugging spiders. "
"Consider the following scrapy spider below::"
msgstr ""

#: ../../topics/debug.rst:37
msgid ""
"Basically this is a simple spider which parses two pages of items (the "
"start_urls). Items also have a details page with additional information, "
"so we use the ``cb_kwargs`` functionality of "
":class:`~scrapy.http.Request` to pass a partially populated item."
msgstr ""

#: ../../topics/debug.rst:44
msgid "Parse Command"
msgstr ""

#: ../../topics/debug.rst:46
msgid ""
"The most basic way of checking the output of your spider is to use the "
":command:`parse` command. It allows to check the behaviour of different "
"parts of the spider at the method level. It has the advantage of being "
"flexible and simple to use, but does not allow debugging code inside a "
"method."
msgstr ""

#: ../../topics/debug.rst:51
msgid "In order to see the item scraped from a specific url::"
msgstr ""

#: ../../topics/debug.rst:63
msgid ""
"Using the ``--verbose`` or ``-v`` option we can see the status at each "
"depth level::"
msgstr ""

#: ../../topics/debug.rst:83
msgid ""
"Checking items scraped from a single start_url, can also be easily "
"achieved using::"
msgstr ""

#: ../../topics/debug.rst:90
msgid "Scrapy Shell"
msgstr ""

#: ../../topics/debug.rst:92
msgid ""
"While the :command:`parse` command is very useful for checking behaviour "
"of a spider, it is of little help to check what happens inside a "
"callback, besides showing the response received and the output. How to "
"debug the situation when ``parse_details`` sometimes receives no item?"
msgstr ""

#: ../../topics/debug.rst:97
msgid ""
"Fortunately, the :command:`shell` is your bread and butter in this case "
"(see :ref:`topics-shell-inspect-response`)::"
msgstr ""

#: ../../topics/debug.rst:109
msgid "See also: :ref:`topics-shell-inspect-response`."
msgstr ""

#: ../../topics/debug.rst:112
msgid "Open in browser"
msgstr ""

#: ../../topics/debug.rst:114
msgid ""
"Sometimes you just want to see how a certain response looks in a browser,"
" you can use the ``open_in_browser`` function for that. Here is an "
"example of how you would use it::"
msgstr ""

#: ../../topics/debug.rst:124
msgid ""
"``open_in_browser`` will open a browser with the response received by "
"Scrapy at that point, adjusting the `base tag`_ so that images and styles"
" are displayed properly."
msgstr ""

#: ../../topics/debug.rst:129
msgid "Logging"
msgstr ""

#: ../../topics/debug.rst:131
msgid ""
"Logging is another useful option for getting information about your "
"spider run. Although not as convenient, it comes with the advantage that "
"the logs will be available in all future runs should they be necessary "
"again::"
msgstr ""

#: ../../topics/debug.rst:142
msgid "For more information, check the :ref:`topics-logging` section."
msgstr ""

