# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008–2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Scrapy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-10 09:37+0900\n"
"PO-Revision-Date: 2019-09-25 15:48+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../topics/loaders.rst:5
msgid "Item Loaders"
msgstr "アイテム・ローダー"

#: ../../topics/loaders.rst:10
msgid ""
"Item Loaders provide a convenient mechanism for populating scraped "
":ref:`Items <topics-items>`. Even though Items can be populated using "
"their own dictionary-like API, Item Loaders provide a much more "
"convenient API for populating them from a scraping process, by automating"
" some common tasks like parsing the raw extracted data before assigning "
"it."
msgstr "アイテムローダーは、スクレイピングされた :ref:`アイテム<topics-items>` を生成するための便利なメカニズムを提供します。 アイテムは独自の辞書のようなAPIを使用して入力できますが、アイテムローダーは、生の抽出データを割り当てる前に解析するなどの一般的なタスクを自動化することにより、スクレイピングプロセスからアイテムを入力するための、はるかに便利なAPIを提供します。"

#: ../../topics/loaders.rst:16
msgid ""
"In other words, :ref:`Items <topics-items>` provide the *container* of "
"scraped data, while Item Loaders provide the mechanism for *populating* "
"that container."
msgstr "言い換えると、 :ref:`アイテム<topics-items>` はスクレイピングされたデータの *コンテナ* を提供し、アイテム・ローダーはそのコンテナに *格納* するメカニズムを提供します。"

#: ../../topics/loaders.rst:20
msgid ""
"Item Loaders are designed to provide a flexible, efficient and easy "
"mechanism for extending and overriding different field parsing rules, "
"either by spider, or by source format (HTML, XML, etc) without becoming a"
" nightmare to maintain."
msgstr "アイテム・ローダーは、スパイダーまたはソース形式(HTML、XMLなど)）によってさまざまなフィールド・パース・ルールを拡張およびオーバーライドするための柔軟で効率的かつ簡単なメカニズムを提供するように設計されています。"

#: ../../topics/loaders.rst:25
msgid "Using Item Loaders to populate items"
msgstr "アイテムを格納するためにアイテム・ローダーを使う"

#: ../../topics/loaders.rst:27
msgid ""
"To use an Item Loader, you must first instantiate it. You can either "
"instantiate it with a dict-like object (e.g. Item or dict) or without "
"one, in which case an Item is automatically instantiated in the Item "
"Loader constructor using the Item class specified in the "
":attr:`ItemLoader.default_item_class` attribute."
msgstr "アイテムローダーを使用するには、最初にインスタンス化する必要があります。 dictのようなオブジェクト(Itemまたはdictなど)でインスタンス化するか、オブジェクトなしでインスタンス化できます。この場合、Itemは、 :attr:`ItemLoader.default_item_class` 属性で指定されたItemクラスを使用してアイテム・ローダー・コンストラクターで自動的にインスタンス化されます。"

#: ../../topics/loaders.rst:33
msgid ""
"Then, you start collecting values into the Item Loader, typically using "
":ref:`Selectors <topics-selectors>`. You can add more than one value to "
"the same item field; the Item Loader will know how to \"join\" those "
"values later using a proper processing function."
msgstr "それから、通常は :ref:`セレクター<topics-selectors>` を使用して、あなたはアイテム・ローダーへの値の収集を開始します。 同じアイテム・フィールドに複数の値を追加できます。アイテム・ローダーは、適切な処理機能を使用して、それらの値を後で「結合」(join)する方法を知っています。"

#: ../../topics/loaders.rst:38
msgid ""
"Here is a typical Item Loader usage in a :ref:`Spider <topics-spiders>`, "
"using the :ref:`Product item <topics-items-declaring>` declared in the "
":ref:`Items chapter <topics-items>`::"
msgstr "以下は、 :ref:`アイテムの章<topics-items>` で宣言された :ref:`Product item <topics-items-declaring>` を使用した、:ref:`スパイダー<topics-spiders>` 内での典型的なアイテム・ローダーの使用法です::"

#: ../../topics/loaders.rst:54
msgid ""
"By quickly looking at that code, we can see the ``name`` field is being "
"extracted from two different XPath locations in the page:"
msgstr "そのコードをざっと見ると、ページ内の2つの異なるXPathロケーションから ``name`` フィールドが抽出されていることがわかります:"

#: ../../topics/loaders.rst:57
msgid "``//div[@class=\"product_name\"]``"
msgstr "``//div[@class=\"product_name\"]``"

#: ../../topics/loaders.rst:58
msgid "``//div[@class=\"product_title\"]``"
msgstr "``//div[@class=\"product_title\"]``"

#: ../../topics/loaders.rst:60
msgid ""
"In other words, data is being collected by extracting it from two XPath "
"locations, using the :meth:`~ItemLoader.add_xpath` method. This is the "
"data that will be assigned to the ``name`` field later."
msgstr "いいかえると、データは、 :meth:`~ItemLoader.add_xpath` メソッドを使用して、2つのXPathロケーションから抽出することで収集されます。 これは後で ``name`` フィールドに割り当てられるデータです。"

#: ../../topics/loaders.rst:64
msgid ""
"Afterwards, similar calls are used for ``price`` and ``stock`` fields "
"(the latter using a CSS selector with the :meth:`~ItemLoader.add_css` "
"method), and finally the ``last_update`` field is populated directly with"
" a literal value (``today``) using a different method: "
":meth:`~ItemLoader.add_value`."
msgstr "その後、同様の呼び出しが ``price`` および ``stock`` フィールド(後者は :meth:`~ItemLoader.add_css` メソッドでCSSセレクターを使用)に対して行われ、おわりに ``last_update`` フィールドは :meth:`~ItemLoader.add_value` という別のメソッドを使用して、リテラル値( ``today`` )を直接入力します:"

#: ../../topics/loaders.rst:69
msgid ""
"Finally, when all data is collected, the :meth:`ItemLoader.load_item` "
"method is called which actually returns the item populated with the data "
"previously extracted and collected with the "
":meth:`~ItemLoader.add_xpath`, :meth:`~ItemLoader.add_css`, and "
":meth:`~ItemLoader.add_value` calls."
msgstr "すべてのデータが収集されると、最後に、 :meth:`ItemLoader.load_item` メソッドが呼び出され、実際に返されるのは、以前に :meth:`~ItemLoader.add_xpath` や :meth:`~ItemLoader.add_css` や :meth:`~ItemLoader.add_value` の呼び出しで収集したデータを格納したアイテムです。"

#: ../../topics/loaders.rst:77
msgid "Input and Output processors"
msgstr "入力プロセッサと出力プロセッサ"

#: ../../topics/loaders.rst:79
msgid ""
"An Item Loader contains one input processor and one output processor for "
"each (item) field. The input processor processes the extracted data as "
"soon as it's received (through the :meth:`~ItemLoader.add_xpath`, "
":meth:`~ItemLoader.add_css` or :meth:`~ItemLoader.add_value` methods) and"
" the result of the input processor is collected and kept inside the "
"ItemLoader. After collecting all data, the :meth:`ItemLoader.load_item` "
"method is called to populate and get the populated "
":class:`~scrapy.item.Item` object.  That's when the output processor is "
"called with the data previously collected (and processed using the input "
"processor). The result of the output processor is the final value that "
"gets assigned to the item."
msgstr "アイテムローダーには、各(アイテム)フィールドごとに1つの入力プロセッサと1つの出力プロセッサが含まれます。入力プロセッサは、( :meth:`~ItemLoader.add_xpath` または :meth:`~ItemLoader.add_css` または :meth:`~ItemLoader.add_value` メソッドを介して)受信したデータをすぐに処理し、入力プロセッサの結果が収集されてアイテム・ローダー内に保持されます。すべてのデータを収集した後、 :meth:`ItemLoader.load_item` メソッドが呼び出されてデータを格納し、データが格納された :class:`~scrapy.item.Item` オブジェクトを取得します。その時点で、以前に収集された(および入力プロセッサを使用して処理された)データを使用して、出力プロセッサが呼び出されます。出力プロセッサの結果は、アイテムに割り当てられる最終値です。"

#: ../../topics/loaders.rst:90
msgid ""
"Let's see an example to illustrate how the input and output processors "
"are called for a particular field (the same applies for any other "
"field)::"
msgstr "(他の任意のフィールドにも同じことが当てはまりますが)とあるフィールドに対して入力プロセッサおよび出力プロセッサがどのように呼び出されるかを例で見てみましょう::"

#: ../../topics/loaders.rst:100
msgid "So what happens is:"
msgstr "以下のステップがあります:"

#: ../../topics/loaders.rst:102
msgid ""
"Data from ``xpath1`` is extracted, and passed through the *input "
"processor* of the ``name`` field. The result of the input processor is "
"collected and kept in the Item Loader (but not yet assigned to the item)."
msgstr "``xpath1`` からのデータが抽出され、 ``name`` フィールドの *入力プロセッサ* を通過します。 入力プロセッサの結果が収集され、アイテムローダーに保持されます(ただし、アイテムにはまだ割り当てられていません)。"

#: ../../topics/loaders.rst:106
msgid ""
"Data from ``xpath2`` is extracted, and passed through the same *input "
"processor* used in (1). The result of the input processor is appended to "
"the data collected in (1) (if any)."
msgstr "``xpath2`` からのデータが抽出され、ステップ(1)で使用されたのと同じ *入力プロセッサ* を通過します。 入力プロセッサの結果は、(存在する場合、)ステップ(1)で収集されたデータに追加されます。"

#: ../../topics/loaders.rst:110
msgid ""
"This case is similar to the previous ones, except that the data is "
"extracted from the ``css`` CSS selector, and passed through the same "
"*input processor* used in (1) and (2). The result of the input processor "
"is appended to the data collected in (1) and (2) (if any)."
msgstr "この場合は、データが ``css`` CSSセレクターから抽出され、ステップ(1)とステップ(2)で使用された同じ *入力プロセッサ* を通過することを除いて、以前の場合と似ています。 入力プロセッサの結果は、(存在する場合、)ステップ(1)およびステップ(2)で収集されたデータに追加されます。"

#: ../../topics/loaders.rst:115
msgid ""
"This case is also similar to the previous ones, except that the value to "
"be collected is assigned directly, instead of being extracted from a "
"XPath expression or a CSS selector. However, the value is still passed "
"through the input processors. In this case, since the value is not "
"iterable it is converted to an iterable of a single element before "
"passing it to the input processor, because input processor always receive"
" iterables."
msgstr "この場合も以前の場合と似ていますが、XPath式またはCSSセレクターから抽出されるのではなく、収集される値が直接割り当てられる点が異なります。 ただし、値は引き続き入力プロセッサを介して渡されます。 この場合、値は反復可能ではなく(not iterable)、そして、入力プロセッサに常に反復可能要素を受け取るため(always receive iterables)、入力プロセッサに渡す前に単一の要素の反復可能要素に変換されます。"

#: ../../topics/loaders.rst:123
msgid ""
"The data collected in steps (1), (2), (3) and (4) is passed through the "
"*output processor* of the ``name`` field. The result of the output "
"processor is the value assigned to the ``name`` field in the item."
msgstr "ステップ(1)〜(4)で収集されたデータは、 ``name`` フィールドの *出力プロセッサ* を介して渡されます。 出力プロセッサの結果は、アイテムの ``name`` フィールドに割り当てられた値です。"

#: ../../topics/loaders.rst:128
msgid ""
"It's worth noticing that processors are just callable objects, which are "
"called with the data to be parsed, and return a parsed value. So you can "
"use any function as input or output processor. The only requirement is "
"that they must accept one (and only one) positional argument, which will "
"be an iterator."
msgstr "プロセッサは、呼び出し可能なオブジェクトであり、パースされるデータとともに呼び出され、パースされた値を返すことに注意してください。 したがって、任意の関数を入力プロセッサまたは出力プロセッサとして使用できます。 唯一の要件は、イテレータになる位置引数を1つ(そして1つだけ)受け入れる必要があることです。"

#: ../../topics/loaders.rst:133
msgid ""
"Both input and output processors must receive an iterator as their first "
"argument. The output of those functions can be anything. The result of "
"input processors will be appended to an internal list (in the Loader) "
"containing the collected values (for that field). The result of the "
"output processors is the value that will be finally assigned to the item."
msgstr "入力プロセッサと出力プロセッサは両方とも、イテレータを最初の引数として受け取る必要があります。 これらの関数の出力は何でもかまいません。 入力プロセッサの結果は、(そのフィールドのために)収集された値を含む(ローダー内の)内部リストに追加されます。出力プロセッサの結果は、最終的にアイテムに割り当てられる値です。"

#: ../../topics/loaders.rst:139
msgid ""
"If you want to use a plain function as a processor, make sure it receives"
" ``self`` as the first argument::"
msgstr "あなたが単純な関数をプロセッサとして使用する場合は、最初の引数として ``self`` を受け取ることを確認してください::"

#: ../../topics/loaders.rst:149
msgid ""
"This is because whenever a function is assigned as a class variable, it "
"becomes a method and would be passed the instance as the the first "
"argument when being called. See `this answer on stackoverflow`_ for more "
"details."
msgstr "なぜなら、これは、関数がクラス変数として割り当てられると常にメソッドになり、呼び出されたときに最初の引数としてインスタンスが渡されるためです。 詳細については、`this answer on stackoverflow`_ (https://stackoverflow.com/a/35322635)を参照してください。"

#: ../../topics/loaders.rst:153
msgid ""
"The other thing you need to keep in mind is that the values returned by "
"input processors are collected internally (in lists) and then passed to "
"output processors to populate the fields."
msgstr "もう1つ注意する必要があるのは、入力プロセッサから返される値が内部(リスト)で収集され、出力プロセッサに渡されてフィールドに入力されることです。"

#: ../../topics/loaders.rst:157
msgid ""
"Last, but not least, Scrapy comes with some :ref:`commonly used "
"processors <topics-loaders-available-processors>` built-in for "
"convenience."
msgstr "最後になりましたが、Scrapyには、便宜上、最小限の :ref:`一般的に使われるプロセッサ<topics-loaders-available-processors>` が組み込まれています。"

#: ../../topics/loaders.rst:163
msgid "Declaring Item Loaders"
msgstr "アイテム・ローダーの宣言"

#: ../../topics/loaders.rst:165
msgid ""
"Item Loaders are declared like Items, by using a class definition syntax."
" Here is an example::"
msgstr "アイテム・ローダーは、クラス定義構文を使用して、アイテムのように宣言されます。以下に例があります::"

#: ../../topics/loaders.rst:182
msgid ""
"As you can see, input processors are declared using the ``_in`` suffix "
"while output processors are declared using the ``_out`` suffix. And you "
"can also declare a default input/output processors using the "
":attr:`ItemLoader.default_input_processor` and "
":attr:`ItemLoader.default_output_processor` attributes."
msgstr "ご覧のように、入力プロセッサは ``_in`` 接尾辞を使用して宣言され、出力プロセッサは ``_out`` 接尾辞を使用して宣言されています。 また、 :attr:`ItemLoader.default_input_processor` と :attr:`ItemLoader.default_output_processor` 属性を使用して、デフォルトの入出力プロセッサを宣言することもできます。"

#: ../../topics/loaders.rst:191
msgid "Declaring Input and Output Processors"
msgstr "入力プロセッサと出力プロセッサの宣言"

#: ../../topics/loaders.rst:193
msgid ""
"As seen in the previous section, input and output processors can be "
"declared in the Item Loader definition, and it's very common to declare "
"input processors this way. However, there is one more place where you can"
" specify the input and output processors to use: in the :ref:`Item Field "
"<topics-items-fields>` metadata. Here is an example::"
msgstr "前述のとおり、入力プロセッサと出力プロセッサはアイテム・ローダー定義で宣言できます。この方法で入力プロセッサを宣言することは非常に一般的です。 ただし、使用する入力プロセッサと出力プロセッサを指定できる場所がもう1つあります。 :ref:`アイテム・フィールド<topics-items-fields>` メタデータです。以下に例を示します::"

#: ../../topics/loaders.rst:226
msgid "The precedence order, for both input and output processors, is as follows:"
msgstr "入力プロセッサと出力プロセッサの両方の優先順位は次のとおりです::"

#: ../../topics/loaders.rst:228
msgid ""
"Item Loader field-specific attributes: ``field_in`` and ``field_out`` "
"(most precedence)"
msgstr "アイテムローダーのフィールド固有の属性: ``field_in`` および ``field_out`` (最優先)"

#: ../../topics/loaders.rst:230
msgid "Field metadata (``input_processor`` and ``output_processor`` key)"
msgstr "フィールド・メタデータ(``input_processor`` と ``output_processor`` キー)"

#: ../../topics/loaders.rst:231
msgid ""
"Item Loader defaults: :meth:`ItemLoader.default_input_processor` and "
":meth:`ItemLoader.default_output_processor` (least precedence)"
msgstr "アイテム・ローダー デフォルト： :meth:`ItemLoader.default_input_processor` と :meth:`ItemLoader.default_output_processor` (最も低い優先度)"

#: ../../topics/loaders.rst:234
msgid "See also: :ref:`topics-loaders-extending`."
msgstr ":ref:`topics-loaders-extending` も参照下さい。"

#: ../../topics/loaders.rst:239
msgid "Item Loader Context"
msgstr "アイテム・ローダー・コンテキスト"

#: ../../topics/loaders.rst:241
msgid ""
"The Item Loader Context is a dict of arbitrary key/values which is shared"
" among all input and output processors in the Item Loader. It can be "
"passed when declaring, instantiating or using Item Loader. They are used "
"to modify the behaviour of the input/output processors."
msgstr "アイテムローダーコンテキストは、アイテムローダーのすべての入力プロセッサおよび出力プロセッサ間で共有される任意のキー・値ペアの辞書です。アイテム・ローダーの宣言、インスタンス化、または使用時に渡すことができます。これらは、入出力プロセッサの動作を変更するために使用されます。"

#: ../../topics/loaders.rst:246
msgid ""
"For example, suppose you have a function ``parse_length`` which receives "
"a text value and extracts a length from it::"
msgstr "たとえば、テキスト値を受け取り、そこから長さを抽出する ``parse_length`` 関数があるとします::"

#: ../../topics/loaders.rst:254
msgid ""
"By accepting a ``loader_context`` argument the function is explicitly "
"telling the Item Loader that it's able to receive an Item Loader context,"
" so the Item Loader passes the currently active context when calling it, "
"and the processor function (``parse_length`` in this case) can thus use "
"them."
msgstr "``loader_context`` 引数を受け入れることにより、プロセッサ関数はアイテム・ローダーがアイテム・ローダー・コンテキストを受け取ることができることを明示的に伝えています。そのため、アイテム・ローダーはプロセッサ関数呼び出し時に現在アクティブなコンテキストを渡します。よってプロセッサ関数(この場合 ``parse_length``)は現在アクティブなコンテキストを使用できます。"

#: ../../topics/loaders.rst:259
msgid "There are several ways to modify Item Loader context values:"
msgstr "アイテムローダーのコンテキスト値を変更する方法はいくつかあります:"

#: ../../topics/loaders.rst:261
msgid ""
"By modifying the currently active Item Loader context "
"(:attr:`~ItemLoader.context` attribute)::"
msgstr "現在アクティブなアイテム・ローダー・コンテキスト( :attr:`~ItemLoader.context` 属性)を変更する::"

#: ../../topics/loaders.rst:267
msgid ""
"On Item Loader instantiation (the keyword arguments of Item Loader "
"constructor are stored in the Item Loader context)::"
msgstr "アイテム・ローダーのインスタンス化時(アイテム・ローダー・コンストラクターのキーワード引数は、アイテム・ローダー・コンテキストに保存されます)::"

#: ../../topics/loaders.rst:272
msgid ""
"On Item Loader declaration, for those input/output processors that "
"support instantiating them with an Item Loader context. "
":class:`~processor.MapCompose` is one of them::"
msgstr "アイテム・ローダーの宣言で、アイテム・ローダー・コンテキストを使用したインスタンス化をサポートする入出力プロセッサ用。 :class:`~processor.MapCompose` はそれらの1つです::"

#: ../../topics/loaders.rst:281
msgid "ItemLoader objects"
msgstr "ItemLoaderオブジェクト"

#: ../../topics/loaders.rst:285
msgid ""
"Return a new Item Loader for populating the given Item. If no item is "
"given, one is instantiated automatically using the class in "
":attr:`default_item_class`."
msgstr "指定されたアイテムを取り込むための新しいアイテムローダーを返します。 項目が指定されていない場合は、 :attr:`default_item_class` のクラスを使用して自動的にインスタンス化されます。"

#: ../../topics/loaders.rst:289
msgid ""
"When instantiated with a ``selector`` or a ``response`` parameters the "
":class:`ItemLoader` class provides convenient mechanisms for extracting "
"data from web pages using :ref:`selectors <topics-selectors>`."
msgstr "``selector`` または ``response`` パラメーターでインスタンス化されると、 :class:`ItemLoader` クラスは :ref:`セレクター<topics-selectors>` を使用してWebページからデータを抽出する便利なメカニズムを提供します。"

#: ../../topics/loaders.rst
msgid "パラメータ"
msgstr "パラメータ"

#: ../../topics/loaders.rst:293
msgid ""
"The item instance to populate using subsequent calls to "
":meth:`~ItemLoader.add_xpath`, :meth:`~ItemLoader.add_css`, or "
":meth:`~ItemLoader.add_value`."
msgstr ":meth:`~ItemLoader.add_xpath` または :meth:`~ItemLoader.add_css` または :meth:`~ItemLoader.add_value` への後続の呼び出しを使用して入力するアイテムインスタンス。"

#: ../../topics/loaders.rst:298
msgid ""
"The selector to extract data from, when using the :meth:`add_xpath` "
"(resp. :meth:`add_css`) or :meth:`replace_xpath` (resp. "
":meth:`replace_css`) method."
msgstr ":meth:`add_xpath` (代わりに :meth:`add_css` ) または :meth:`replace_xpath` (代わりに :meth:`replace_css` )メソッドを使用する場合にデータを抽出するセレクター。"

#: ../../topics/loaders.rst:303
msgid ""
"The response used to construct the selector using the "
":attr:`default_selector_class`, unless the selector argument is given, in"
" which case this argument is ignored."
msgstr "セレクター引数が指定されていない限り、 :attr:`default_selector_class` を使用してセレクターを構築するために使用されるレスポンス。この場合、この引数は無視されます。"

#: ../../topics/loaders.rst:308
msgid ""
"The item, selector, response and the remaining keyword arguments are "
"assigned to the Loader context (accessible through the :attr:`context` "
"attribute)."
msgstr "アイテム、セレクター、レスポンス、および残りのキーワード引数はローダー・コンテキストに割り当てられます( :attr:`context` 属性からアクセス可能)。"

#: ../../topics/loaders.rst:311
msgid ":class:`ItemLoader` instances have the following methods:"
msgstr ":class:`ItemLoader` インスタンスには以下のメソッドがあります:"

#: ../../topics/loaders.rst:315
msgid ""
"Process the given ``value`` by the given ``processors`` and keyword "
"arguments."
msgstr "指定した ``processors`` とキーワード引数により、指定した ``value`` を処理します。"

#: ../../topics/loaders.rst:318
msgid "Available keyword arguments:"
msgstr "利用可能なキーワード引数:"

#: ../../topics/loaders.rst:320
msgid ""
"a regular expression to use for extracting data from the given value "
"using :meth:`~scrapy.utils.misc.extract_regex` method, applied before "
"processors"
msgstr "プロセッサの前に適用される :meth:`~scrapy.utils.misc.extract_regex` メソッドを使用して、指定された値からデータを抽出するために使用する正規表現"

#: ../../topics/loaders.rst:325 ../../topics/loaders.rst:345
#: ../../topics/loaders.rst:370 ../../topics/loaders.rst:388
#: ../../topics/loaders.rst:413 ../../topics/loaders.rst:431
#: ../../topics/loaders.rst:676
msgid "Examples::"
msgstr "例::"

#: ../../topics/loaders.rst:333
msgid "Process and then add the given ``value`` for the given field."
msgstr "処理してから、指定したフィールドに指定した ``value`` を追加します。"

#: ../../topics/loaders.rst:335
msgid ""
"The value is first passed through :meth:`get_value` by giving the "
"``processors`` and ``kwargs``, and then passed through the :ref:`field "
"input processor <topics-loaders-processors>` and its result appended to "
"the data collected for that field. If the field already contains "
"collected data, the new data is added."
msgstr "値は、``processors`` と ``kwargs`` を与える事により、最初に :meth:`get_value` を介して渡され、そして、 :ref:`フィールド入力プロセッサ<topics-loaders-processors>` を通過し、そして、その結果は、そのフィールドで収集されたデータに追加されます。フィールドにすでに収集されたデータが含まれている場合、新しいデータが追加されます。"

#: ../../topics/loaders.rst:341
msgid ""
"The given ``field_name`` can be ``None``, in which case values for "
"multiple fields may be added. And the processed value should be a dict "
"with field_name mapped to values."
msgstr "与える ``field_name`` は ``None`` にすることができます。その場合、複数のフィールドの値が追加されます。 そして、処理された値は、field_nameが値にマッピングされた辞書でなければなりません。"

#: ../../topics/loaders.rst:355
msgid ""
"Similar to :meth:`add_value` but replaces the collected data with the new"
" value instead of adding it."
msgstr ":meth:`add_value` に似ていますが、収集したデータを追加する代わりに新しい値に置き換えます。"

#: ../../topics/loaders.rst:359
msgid ""
"Similar to :meth:`ItemLoader.get_value` but receives an XPath instead of "
"a value, which is used to extract a list of unicode strings from the "
"selector associated with this :class:`ItemLoader`."
msgstr ":meth:`ItemLoader.get_value` に似ていますが、値の代わりにXPathを受け取ります。これは、この :class:`ItemLoader` に関連付けられたセレクターからUnicode文字列のリストを抽出するために使用されます。"

#: ../../topics/loaders.rst:363 ../../topics/loaders.rst:385
msgid "the XPath to extract data from"
msgstr "データを抽出するためのXPath"

#: ../../topics/loaders.rst:366
msgid ""
"a regular expression to use for extracting data from the selected XPath "
"region"
msgstr "選択したXPath領域からデータを抽出するために使用する正規表現"

#: ../../topics/loaders.rst:379
msgid ""
"Similar to :meth:`ItemLoader.add_value` but receives an XPath instead of "
"a value, which is used to extract a list of unicode strings from the "
"selector associated with this :class:`ItemLoader`."
msgstr ":meth:`ItemLoader.add_value` に似ていますが、値の代わりにXPathを受け取ります。これは、この :class:`ItemLoader` に関連付けられたセレクターからUnicode文字列のリストを抽出するために使用されます。"

#: ../../topics/loaders.rst:383
msgid "See :meth:`get_xpath` for ``kwargs``."
msgstr "``kwargs`` については :meth:`get_xpath` を参照してください。"

#: ../../topics/loaders.rst:397
msgid ""
"Similar to :meth:`add_xpath` but replaces collected data instead of "
"adding it."
msgstr ":meth:`add_xpath` に似ていますが、収集したデータを追加する代わりに置き換えます。"

#: ../../topics/loaders.rst:402
msgid ""
"Similar to :meth:`ItemLoader.get_value` but receives a CSS selector "
"instead of a value, which is used to extract a list of unicode strings "
"from the selector associated with this :class:`ItemLoader`."
msgstr ":meth:`ItemLoader.get_value` に似ていますが、値の代わりにCSSセレクターを受け取ります。これは、この :class:`ItemLoader` に関連付けられたセレクターからUnicode文字列のリストを抽出するために使用されます。"

#: ../../topics/loaders.rst:406 ../../topics/loaders.rst:428
msgid "the CSS selector to extract data from"
msgstr "データを抽出するためのCSSセレクター"

#: ../../topics/loaders.rst:409
msgid ""
"a regular expression to use for extracting data from the selected CSS "
"region"
msgstr "選択したCSS領域からデータを抽出するために使用する正規表現"

#: ../../topics/loaders.rst:422
msgid ""
"Similar to :meth:`ItemLoader.add_value` but receives a CSS selector "
"instead of a value, which is used to extract a list of unicode strings "
"from the selector associated with this :class:`ItemLoader`."
msgstr ":meth:`ItemLoader.add_value` に似ていますが、値の代わりにCSSセレクターを受け取ります。これは、この :class:`ItemLoader` に関連付けられたセレクターからUnicode文字列のリストを抽出するために使用されます。"

#: ../../topics/loaders.rst:426
msgid "See :meth:`get_css` for ``kwargs``."
msgstr "``kwargs`` については :meth:`get_css` を参照してください。"

#: ../../topics/loaders.rst:440
msgid ""
"Similar to :meth:`add_css` but replaces collected data instead of adding "
"it."
msgstr ":meth:`add_css` に似ていますが、収集したデータを追加する代わりに置き換えます。"

#: ../../topics/loaders.rst:445
msgid ""
"Populate the item with the data collected so far, and return it. The data"
" collected is first passed through the :ref:`output processors <topics-"
"loaders-processors>` to get the final value to assign to each item field."
msgstr "これまでに収集されたデータをアイテムに入力し、それを返します。 収集されたデータは最初に :ref:`出力プロセッサ<topics-loaders-processors>` に渡され、各項目フィールドに割り当てる最終値を取得します。"

#: ../../topics/loaders.rst:452
msgid ""
"Create a nested loader with an xpath selector. The supplied selector is "
"applied relative to selector associated with this :class:`ItemLoader`. "
"The nested loader shares the :class:`Item` with the parent "
":class:`ItemLoader` so calls to :meth:`add_xpath`, :meth:`add_value`, "
":meth:`replace_value`, etc. will behave as expected."
msgstr "xpathセレクターでネストされたローダーを作成します。 提供されたセレクターは、この :class:`ItemLoader` に関連付けられたセレクターに対して相対的に適用されます。 ネストされたローダーは :class:`Item` を親の :class:`ItemLoader` と共有するため、 :meth:`add_xpath` 、 :meth:`add_value` 、 :meth:`replace_value` などの呼び出しは期待どおりに動作します。"

#: ../../topics/loaders.rst:460
msgid ""
"Create a nested loader with a css selector. The supplied selector is "
"applied relative to selector associated with this :class:`ItemLoader`. "
"The nested loader shares the :class:`Item` with the parent "
":class:`ItemLoader` so calls to :meth:`add_xpath`, :meth:`add_value`, "
":meth:`replace_value`, etc. will behave as expected."
msgstr "CSSセレクターでネストされたローダーを作成します。 提供されたセレクターは、この :class:`ItemLoader` に関連付けられたセレクターに対して相対的に適用されます。 ネストされたローダーは :class:`Item` を親の :class:`ItemLoader` と共有するため、 :meth:`add_xpath` 、 :meth:`add_value` 、 :meth:`replace_value` などの呼び出しは期待どおりに動作します。"

#: ../../topics/loaders.rst:468
msgid "Return the collected values for the given field."
msgstr "指定のフィールドで収集された値を返します。"

#: ../../topics/loaders.rst:472
msgid ""
"Return the collected values parsed using the output processor, for the "
"given field. This method doesn't populate or modify the item at all."
msgstr "指定されたフィールドについて、出力プロセッサを使用してパースされた収集値を返します。 このメソッドは、アイテムの入力や変更を一切行いません。"

#: ../../topics/loaders.rst:477
msgid "Return the input processor for the given field."
msgstr "指定フィールドの入力プロセッサを返します。"

#: ../../topics/loaders.rst:481
msgid "Return the output processor for the given field."
msgstr "指定フィールドの出力プロセッサを返します。"

#: ../../topics/loaders.rst:483
msgid ":class:`ItemLoader` instances have the following attributes:"
msgstr ":class:`ItemLoader` インスタンスには次の属性があります:"

#: ../../topics/loaders.rst:487
msgid "The :class:`~scrapy.item.Item` object being parsed by this Item Loader."
msgstr "このアイテムローダーによってパースされる :class:`~scrapy.item.Item` オブジェクト。"

#: ../../topics/loaders.rst:491
msgid ""
"The currently active :ref:`Context <topics-loaders-context>` of this Item"
" Loader."
msgstr "このアイテム・ローダーの現在アクティブな :ref:`コンテキスト<topics-loaders-context>` 。"

#: ../../topics/loaders.rst:496
msgid ""
"An Item class (or factory), used to instantiate items when not given in "
"the constructor."
msgstr "コンストラクターで指定されていないときにアイテムをインスタンス化するために使用されるItemクラス(またはファクトリー)。"

#: ../../topics/loaders.rst:501
msgid ""
"The default input processor to use for those fields which don't specify "
"one."
msgstr "入力プロセッサを指定しないフィールドに使用するデフォルトの入力プロセッサ。"

#: ../../topics/loaders.rst:506
msgid ""
"The default output processor to use for those fields which don't specify "
"one."
msgstr "出力プロセッサを指定しないフィールドに使用するデフォルトの出力プロセッサ。"

#: ../../topics/loaders.rst:511
msgid ""
"The class used to construct the :attr:`selector` of this "
":class:`ItemLoader`, if only a response is given in the constructor. If a"
" selector is given in the constructor this attribute is ignored. This "
"attribute is sometimes overridden in subclasses."
msgstr "コンストラクターでレスポンスのみが指定された場合、この :class:`ItemLoader` の :attr:`selector` を構築するために使用されるクラス。コンストラクターでセレクターが指定されている場合、この属性は無視されます。 この属性はサブクラスでオーバーライドされる場合があります。"

#: ../../topics/loaders.rst:518
msgid ""
"The :class:`~scrapy.selector.Selector` object to extract data from. It's "
"either the selector given in the constructor or one created from the "
"response given in the constructor using the "
":attr:`default_selector_class`. This attribute is meant to be read-only."
msgstr "データを抽出する :class:`~scrapy.selector.Selector` オブジェクト。 これは、コンストラクターで指定されたセレクター、またはコンストラクターで :attr:`default_selector_class` を使用して指定されたレスポンスから作成されたセレクターです。この属性は読み取り専用です。"

#: ../../topics/loaders.rst:527
msgid "Nested Loaders"
msgstr "ネストされたローダー"

#: ../../topics/loaders.rst:529
msgid ""
"When parsing related values from a subsection of a document, it can be "
"useful to create nested loaders.  Imagine you're extracting details from "
"a footer of a page that looks something like:"
msgstr "ドキュメントのサブセクションから関連する値をパースする場合、ネストされたローダーを作成すると便利です。以下のようなページのフッターから詳細を抽出しているとします:"

#: ../../topics/loaders.rst:533 ../../topics/loaders.rst:544
#: ../../topics/loaders.rst:556 ../../topics/loaders.rst:648
#: ../../topics/loaders.rst:661 ../../topics/loaders.rst:697
#: ../../topics/loaders.rst:761
msgid "Example::"
msgstr "例::"

#: ../../topics/loaders.rst:541
msgid ""
"Without nested loaders, you need to specify the full xpath (or css) for "
"each value that you wish to extract."
msgstr "ネストされたローダーがない場合、あなたは抽出する値ごとに完全なxpath(またはcss)を指定する必要があります。"

#: ../../topics/loaders.rst:552
msgid ""
"Instead, you can create a nested loader with the footer selector and add "
"values relative to the footer.  The functionality is the same but you "
"avoid repeating the footer selector."
msgstr "代わりに、あなたはフッター・セレクターを使用してネストされたローダーを作成し、フッターに関連する値を追加できます。機能は同じですが、あなたはフッター・セレクターの繰り返しを回避できます。"

# overboard意味不明…強調するような物言いっぽいので単に省く。
#: ../../topics/loaders.rst:566
msgid ""
"You can nest loaders arbitrarily and they work with either xpath or css "
"selectors. As a general guideline, use nested loaders when they make your"
" code simpler but do not go overboard with nesting or your parser can "
"become difficult to read."
msgstr "あなたはローダーを任意にネストでき、xpathまたはcssセレクターで動作します。 一般的なガイドラインとして、ネストされたローダーを使用してコードを単純化します。ネストしないと、パーサーが読みにくくなる可能性があります。"

#: ../../topics/loaders.rst:573
msgid "Reusing and extending Item Loaders"
msgstr "アイテムローダーの再利用と拡張"

#: ../../topics/loaders.rst:575
msgid ""
"As your project grows bigger and acquires more and more spiders, "
"maintenance becomes a fundamental problem, especially when you have to "
"deal with many different parsing rules for each spider, having a lot of "
"exceptions, but also wanting to reuse the common processors."
msgstr "あなたのプロジェクトが大きくなり、ますます多くのスパイダーを取得するにつれて、メンテナンスは根本的な問題になります。特に、各スパイダーの多くの異なるパースルールを処理する必要がある場合、多くの例外があります。また、共通のプロセッサを再利用したい場合も同様です。"

#: ../../topics/loaders.rst:580
msgid ""
"Item Loaders are designed to ease the maintenance burden of parsing "
"rules, without losing flexibility and, at the same time, providing a "
"convenient mechanism for extending and overriding them. For this reason "
"Item Loaders support traditional Python class inheritance for dealing "
"with differences of specific spiders (or groups of spiders)."
msgstr "アイテムローダーは、柔軟性を失うことなく、パースルールのメンテナンスの負担を軽減するように設計されていると同時に、それらを拡張およびオーバーライドするための便利なメカニズムを提供します。このため、アイテムローダーは、特定のスパイダー(またはスパイダーのグループ)の違いを処理するために、従来のPythonクラスの継承をサポートしています。"

#: ../../topics/loaders.rst:586
msgid ""
"Suppose, for example, that some particular site encloses their product "
"names in three dashes (e.g. ``---Plasma TV---``) and you don't want to "
"end up scraping those dashes in the final product names."
msgstr "たとえば、ある特定のサイトが製品名を3つのダッシュ(たとえば ``---Plasma TV---`` )で囲んでおり、最終製品名でそれらのダッシュをスクレイピングしたくないと仮定します。"

#: ../../topics/loaders.rst:590
msgid ""
"Here's how you can remove those dashes by reusing and extending the "
"default Product Item Loader (``ProductLoader``)::"
msgstr "ここで、デフォルトの製品アイテムローダー( ``ProductLoader`` )を再利用して拡張することで、これらのダッシュを削除する方法を次に示します::"

#: ../../topics/loaders.rst:602
msgid ""
"Another case where extending Item Loaders can be very helpful is when you"
" have multiple source formats, for example XML and HTML. In the XML "
"version you may want to remove ``CDATA`` occurrences. Here's an example "
"of how to do it::"
msgstr "アイテムローダーの拡張が非常に役立つ別のケースは、XMLやHTMLなどの複数のソース形式がある場合です。XMLバージョンでは、 ``CDATA`` の出現を削除することができます。方法の例を次に示します::"

#: ../../topics/loaders.rst:613
msgid "And that's how you typically extend input processors."
msgstr "そして、それは、入力プロセッサを拡張する典型的な方法です。"

#: ../../topics/loaders.rst:615
msgid ""
"As for output processors, it is more common to declare them in the field "
"metadata, as they usually depend only on the field and not on each "
"specific site parsing rule (as input processors do). See also: :ref"
":`topics-loaders-processors-declaring`."
msgstr "出力プロセッサについては、フィールドメタデータで宣言する方が一般的です。これは、通常、(入力プロセッサのように)特定の各サイトのパースルールではなく、フィールドのみに依存するためです。 :ref:`topics-loaders-processors-declaring` も参照してください。"

#: ../../topics/loaders.rst:620
msgid ""
"There are many other possible ways to extend, inherit and override your "
"Item Loaders, and different Item Loaders hierarchies may fit better for "
"different projects. Scrapy only provides the mechanism; it doesn't impose"
" any specific organization of your Loaders collection - that's up to you "
"and your project's needs."
msgstr "アイテムローダーを拡張、継承、およびオーバーライドする方法は他にもたくさんあります。さまざまなアイテムローダーの階層は、さまざまなプロジェクトにより適しています。 Scrapyはメカニズムのみを提供します。 ローダーコレクションの特定の構成を強制することはありません。それはあなたとプロジェクトのニーズ次第です。"

#: ../../topics/loaders.rst:629
msgid "Available built-in processors"
msgstr "利用可能な組み込みプロセッサ"

#: ../../topics/loaders.rst:634
msgid ""
"Even though you can use any callable function as input and output "
"processors, Scrapy provides some commonly used processors, which are "
"described below. Some of them, like the :class:`MapCompose` (which is "
"typically used as input processor) compose the output of several "
"functions executed in order, to produce the final parsed value."
msgstr "呼び出し可能な関数を入力プロセッサおよび出力プロセッサとして使用できますが、Scrapyは一般的に使用されるいくつかのプロセッサを提供します。これらについては以下で説明します。 :class:`MapCompose` (通常は入力プロセッサとして使用される)のようなそれらのいくつかは、最終的にパースされた値を生成するために、順番に実行されるいくつかの関数の出力を構成します。"

#: ../../topics/loaders.rst:640
msgid "Here is a list of all built-in processors:"
msgstr "以下に、すべての組み込みプロセッサのリストがあります:"

#: ../../topics/loaders.rst:644
msgid ""
"The simplest processor, which doesn't do anything. It returns the "
"original values unchanged. It doesn't receive any constructor arguments, "
"nor does it accept Loader contexts."
msgstr "何もしない最も単純なプロセッサ。元の値を変更せずに返します。コンストラクター引数を受け取らず、ローダーコンテキストも受け入れません。"

#: ../../topics/loaders.rst:657
msgid ""
"Returns the first non-null/non-empty value from the values received, so "
"it's typically used as an output processor to single-valued fields. It "
"doesn't receive any constructor arguments, nor does it accept Loader "
"contexts."
msgstr "受信した値から最初の非ヌル/空でない(non-null/non-empty)値を返します。したがって、通常は単一値フィールドへの出力プロセッサとして使用されます。コンストラクター引数を受け取らず、ローダーコンテキストも受け入れません。"

#: ../../topics/loaders.rst:670
msgid ""
"Returns the values joined with the separator given in the constructor, "
"which defaults to ``u' '``. It doesn't accept Loader contexts."
msgstr "コンストラクタで指定されたセパレータで結合した返します。セパレータのデフォルトは ``u' '`` (空白1文字)です。ローダーコンテキストは受け入れません。"

#: ../../topics/loaders.rst:673
msgid ""
"When using the default separator, this processor is equivalent to the "
"function: ``u' '.join``"
msgstr "デフォルトのセパレータを使用する場合、このプロセッサは次の関数と同等です: ``u' '.join``"

#: ../../topics/loaders.rst:688
msgid ""
"A processor which is constructed from the composition of the given "
"functions. This means that each input value of this processor is passed "
"to the first function, and the result of that function is passed to the "
"second function, and so on, until the last function returns the output "
"value of this processor."
msgstr "与えた関数(達)の組み合わせで構築されたプロセッサー。つまり、このプロセッサの各入力値は最初の関数に渡され、その関数の結果は2番目の関数に渡され、最後の関数がこのプロセッサの出力値を返すまで続きます。"

#: ../../topics/loaders.rst:694
msgid ""
"By default, stop process on ``None`` value. This behaviour can be changed"
" by passing keyword argument ``stop_on_none=False``."
msgstr "デフォルトでは、 ``None`` の値で処理を停止します。この動作は、キーワード引数 ``stop_on_none = False`` を渡すことで変更できます。"

#: ../../topics/loaders.rst:704
msgid ""
"Each function can optionally receive a ``loader_context`` parameter. For "
"those which do, this processor will pass the currently active "
":ref:`Loader context <topics-loaders-context>` through that parameter."
msgstr "各関数はオプションで ``loader_context`` パラメーターを受け取ることができます。実行する場合、このプロセッサーは現在アクティブな :ref:`ローダー・コンテキスト<topics-loaders-context>` をそのパラメーターを通して渡します。"

#: ../../topics/loaders.rst:708
msgid ""
"The keyword arguments passed in the constructor are used as the default "
"Loader context values passed to each function call. However, the final "
"Loader context values passed to functions are overridden with the "
"currently active Loader context accessible through the "
":meth:`ItemLoader.context` attribute."
msgstr "コンストラクターに渡されるキーワード引数は、各関数呼び出しに渡されるデフォルトのローダーコンテキスト値として使用されます。 ただし、関数に渡される最終的なローダーコンテキスト値は、 :meth:`ItemLoader.context` 属性を介してアクセス可能な、現在アクティブなローダーコンテキストでオーバーライドされます。"

#: ../../topics/loaders.rst:716
msgid ""
"A processor which is constructed from the composition of the given "
"functions, similar to the :class:`Compose` processor. The difference with"
" this processor is the way internal results are passed among functions, "
"which is as follows:"
msgstr ":class:`Compose` プロセッサと同様に、指定された関数の組み合わせから構築されるプロセッサ。このプロセッサーとの違いは、内部結果が関数間で渡される方法です。これは次のとおりです:"

#: ../../topics/loaders.rst:721
msgid ""
"The input value of this processor is *iterated* and the first function is"
" applied to each element. The results of these function calls (one for "
"each element) are concatenated to construct a new iterable, which is then"
" used to apply the second function, and so on, until the last function is"
" applied to each value of the list of values collected so far. The output"
" values of the last function are concatenated together to produce the "
"output of this processor."
msgstr "このプロセッサの入力値は *反復可能* であり、最初の関数が各要素に適用されます。これらの関数呼び出しの結果(要素ごとに1つ）が連結されて新しい反復可能要素が作成され、2番目の関数の適用に使用されます。収集された値のリストの各値に最後の関数が適用されるまで、それが延々続きます。最後の関数の出力値が連結されて、このプロセッサーの出力が生成されます。"

#: ../../topics/loaders.rst:728
msgid ""
"Each particular function can return a value or a list of values, which is"
" flattened with the list of values returned by the same function applied "
"to the other input values. The functions can also return ``None`` in "
"which case the output of that function is ignored for further processing "
"over the chain."
msgstr "特定の各関数は、値または値のリストを返すことができます。これは、他の入力値に適用された同じ関数によって返される値のリストでフラット化されます。関数は  ``None`` を返すこともできます。その場合、その関数の出力は無視され、以後の関数チェーンでのさらなる処理が行われます。"

#: ../../topics/loaders.rst:734
msgid ""
"This processor provides a convenient way to compose functions that only "
"work with single values (instead of iterables). For this reason the "
":class:`MapCompose` processor is typically used as input processor, since"
" data is often extracted using the "
":meth:`~scrapy.selector.Selector.extract` method of :ref:`selectors "
"<topics-selectors>`, which returns a list of unicode strings."
msgstr "このプロセッサは、(反復可能要素の代わりに、)単一の値でのみ機能する関数を構成する便利な方法を提供します。このため、データはしばしば :ref:`セレクター<topics-selectors>` の :meth:`~scrapy.selector.Selector.extract` メソッドを使用して抽出され、そのため、通常は :class:`MapCompose` プロセッサが入力プロセッサとして使用されます。Unicode文字列のリストを返します。"

#: ../../topics/loaders.rst:741
msgid "The example below should clarify how it works::"
msgstr "以下の例は、それがどのように機能するかを明確にするはずです::"

#: ../../topics/loaders.rst:751
msgid ""
"As with the Compose processor, functions can receive Loader contexts, and"
" constructor keyword arguments are used as default context values. See "
":class:`Compose` processor for more info."
msgstr "Composeプロセッサと同様に、関数はローダーコンテキストを受け取ることができ、コンストラクターのキーワード引数はデフォルトのコンテキスト値として使用されます。 詳細については、 :class:`Compose` プロセッサを参照してください。"

#: ../../topics/loaders.rst:757
msgid ""
"Queries the value using the json path provided to the constructor and "
"returns the output. Requires jmespath "
"(https://github.com/jmespath/jmespath.py) to run. This processor takes "
"only one input at a time."
msgstr "コンストラクターに提供されたjsonパスを使用して値を照会し、出力を返します。 実行するにはjmespath(https://github.com/jmespath/jmespath.py)が必要です。このプロセッサは、一度に1つの入力のみを受け取ります。"

#: ../../topics/loaders.rst:770
msgid "Working with Json::"
msgstr "Jsonの操作::"

